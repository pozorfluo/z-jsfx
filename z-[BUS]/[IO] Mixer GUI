desc:IO Mixer

//hide me later with -
//slider4:    0<-96,0,0.01>-bus_4

slider26:   0<-96,0,0.01>-bus_4_send_1
slider27:   0<-96,0,0.01>-bus_4_send_2
slider28:   0<-96,0,0.01>-bus_4_send_3
slider29:   0<-96,0,0.01>-bus_4_send_4
slider30:   0<-96,0,0.01>-bus_4_send_5
slider31:   0<-96,0,0.01>-bus_4_send_6
slider32:   0<-96,0,0.01>-bus_4_send_7
slider33:   0<-96,0,0.01>-bus_4_send_8


//slider63:0<0,12,1{BOX,KIT,BASS,VOX,BVOX,GTR1,GTR2,SYN1,SYN2,KEY,BIT1,BIT2,AUX,FREE,FREE,FREE}>Track Color
//slider64:0<0,2,1{Off,Buffer Map, Values}>Debug Mode

import z/z-Utilities.jsfx-inc
//import z-Bus.jsfx-inc

@init
/*******************************************************************
  slidersInputUpdate     
  -------  
*******************************************************************/
function slidersInputUpdate()
  (
  
  slider26 > -96 ?
    (
    bus_4_send_1  = exp(slider26 * 0.11552453);
    ):(
    bus_4_send_1 = 0;
    );
    
  slider27 > -96 ?
    (
    bus_4_send_2  = exp(slider27 * 0.11552453);
    ):(
    bus_4_send_2 = 0;
    );
  slider28 > -96 ?
    (
    bus_4_send_3  = exp(slider28 * 0.11552453);
    ):(
    bus_4_send_3 = 0;
    );
  slider29 > -96 ?
    (
    bus_4_send_4  = exp(slider29 * 0.11552453);
    ):(
    bus_4_send_4 = 0;
    );
  slider30 > -96 ?
    (
    bus_4_send_5  = exp(slider30 * 0.11552453);
    ):(
    bus_4_send_5 = 0;
    );
  slider31 > -96 ?
    (
    bus_4_send_6  = exp(slider31 * 0.11552453);
    ):(
    bus_4_send_6 = 0;
    );
  slider32 > -96 ?
    (
    bus_4_send_7  = exp(slider32 * 0.11552453);
    ):(
    bus_4_send_7 = 0;
    );
    
  slider33 > -96 ?
    (
    bus_4_send_8  = exp(slider33 * 0.11552453);
    ):(
    bus_4_send_8 = 0;
    );
  //Debug.CallFnCount += 1;
  );

/*******************************************************************
  packRGB     
  -------  
*******************************************************************/
function packRGB(red, green, blue)
  local(sum)
  (  
  sum = blue + green << 8 + red << 16; //bitshift yelds integers
  );
  

/*******************************************************************
  setPackedColor   
  -----
  PACKED version
  
  Sets current color, alpha left as is.
*******************************************************************/
function setPackedColor(color)
  (          
  gfx_b = (color & $x0000FF) / 256; 
  gfx_g = ((color & $x00FF00) >> 8) / 256; 
  gfx_r = ((color & $xFF0000) >> 16)/ 256; 
  );
  
/*******************************************************************
  setColor     
  -----
  Sets current color, alpha left as is.
*******************************************************************/
function setColor(red, green, blue)
  (
  gfx_r = red / 255; 
  gfx_g = green / 255; 
  gfx_b = blue / 255; 
  );

/*******************************************************************
  invertColor     
  --------
*******************************************************************/
function invertColor()
  (
  /*
  gfx_r = 1 - gfx_r;
  gfx_g = 1 - gfx_g;
  gfx_b = 0.5 - gfx_b; //pretty mod 0.5 - 
  */
  window.track_color ?
    (
    window.track_color = 0;
    ):(
    window.track_color = 1;
    );
  setPackedcolor(_COLOR[window.track_color]);
  );
  
/*******************************************************************
  camaieuColor     
  --------
*******************************************************************/
function camaieuColor(delta)
  (
  gfx_r > gfx_g ?
    (
    gfx_r -= delta;
    gfx_g += delta;
    ):(
    gfx_r += delta;
    gfx_g -= delta;
    );
  gfx_b > gfx_r ? gfx_b -= delta;
  );
  
/*******************************************************************
  colorAdjust     
  --------
*******************************************************************/
function colorAdjust(mouse_wheel_val)
  (
  mouse_wheel_val > 0 ? 
    (
    gfx_r = min(1, gfx_r + 0.1);
    ):(
    gfx_r = max(0, gfx_r - 0.1);
    );
  mouse_wheel = 0;
  );
  
/*******************************************************************
  drawKnob     
  --------
*******************************************************************/
function drawKnob(param_value, x)
  (
  //Actual Knob
  //gfx_mode = 0;
  gfx_a = knob.opacity / 2;
  //invertColor();
  gfx_rect(x, gfx_y, knob.width, knob.height);
  //invertColor();
  gfx_a = knob.opacity;
  gfx_rect(x, gfx_y, knob.width * param_value, knob.height); // * 0.99);
  
  gfx_a = knob.txt_opacity;
  
  //Buttons
  /*
  gfx_a = 1;
  invertColor();
  gfx_roundrect(355, gfx_y + 17, 50, 50 , 5 , 0); 
  gfx_roundrect(695, gfx_y + 17, 50, 50 , 5 , 0); 
  invertColor();  
  */
  );



/*******************************************************************
  initWindow     
  --------
*******************************************************************/
function initWindow()
  (
  window.width = gfx_w;
  window.height = gfx_h ;
    
  window.channel_count = 8; //num_ch;
  
  
  window.scale = min(window.width / 900, window.height / 500);
  
  display.stateQuery(display._REFRESH_METERS) ? 
    (
    margin.top     = 15 + window.channel_count * 13 + ceil(_MARGIN_TOP * window.scale);
    ):(
    margin.top     = 5 + ceil(_MARGIN_TOP * window.scale);  
    );
  margin.left    = ceil(_MARGIN_LEFT * window.scale);
  
  knob.h_spacing = ceil(_H_SPACING   * window.scale);
  knob.v_spacing = ceil(_V_SPACING   * window.scale);
    
  knob.width = ceil((window.width - 2 * margin.left - (window.bus_count - 1) * knob.h_spacing)  / window.bus_count); 
    
  font.size = 8; //HaxrCorp is 8 only 
  
  //gfx_setfont(1, font.name, font.size + 5);
  gfx_setfont(1, font.name, font.size);
  
  knob.height = font.size * knob.height_multiplier;
  
  //save on some calculations in gfx refresh
  knob.h_spacing_half   = ceil(knob.h_spacing / 2);
  knob.v_spacing_half   = ceil(knob.v_spacing / 2);
  knob.height_half      = ceil(knob.height    / 2);
  knob.width_half       = ceil(knob.width     / 2);
  font.size_half        = ceil(font.size      / 2);
  
  knob.h_spacing_third  = ceil(knob.h_spacing / 3);
  knob.v_spacing_third  = ceil(knob.v_spacing / 3);
  knob.height_third     = ceil(knob.height    / 3);
  knob.width_third      = ceil(knob.width     / 3);
  font.size_third       = ceil(font.size      / 3);
  
    
    
  display.stateOn(display._REFRESH_GFX); //flag for GUI refresh
  
  );

/*******************************************************************
  drawWindow     
  --------
*******************************************************************/
function drawWindow()
  local(bus_index, send_index, slider_index, param_value, param_normalized_value, text_width, text_height, x)
  (
  #tmp = "";
  
  //Draw Background
  gfx_r = gfx_g = gfx_b = _COLOR_BG;
  gfx_rect(0, 0, this.width, this.height);
  
  
  //DRAW SHIT HERE
  bus_index = 1; setPackedcolor(_COLOR[this.track_color]);
    
  //invertColor();
  ////////////////////////////////// BUSSES //////////////////////////////////
  ////
  //loop(this.bus_count,
    
    gfx_y = margin.top; send_index = 1;
    
    //KNOB
    gfx_mode = 0;    
    param_value = slider(bus_index);   
    param_normalized_value = 1 + param_value / 96;
    //x = margin.left * bus_index + knob.width * (bus_index - 1);     
    x = margin.left + knob.h_spacing * (bus_index - 1 ) + knob.width * (bus_index - 1);
    //drawBigKnob(param_normalized_value, x);
    
    
    //NAME
    gfx_mode = 1; //gfx_a = -gfx_a;
    
    gfx_measurestr(this.bus_name[bus_index - 1], text_width, text_height);    
    gfx_x = x + knob.width_half - text_width;
    //gfx_y += (knob.height  * knob.big_multiplier ) / 2 - font.size_half - 2;
    
    invertColor(); 
    gfx_drawstr("[ "); 
    invertColor();    
    gfx_drawstr(this.bus_name[bus_index - 1]);
    invertColor();        
    gfx_drawstr(" ]");
    invertColor();
    
    gfx_y += knob.height;
    
     
    ////////////////////////////////// SENDS //////////////////////////////////
    ////     
    loop(this.send_count,
      
      //KNOB      
      //slider_index = 4 + min(6, send_index) * (bus_index - 1) + min(1, bus_index - 1) + min(1, bus_index - 2) * 2 + send_index;
      /*
      bus_index == 1             ? (slider_index = 4  + send_index;
        ):(
      bus_index == 2             ? (slider_index = 10 + send_index;
        ):(
      bus_index == 3             ? (slider_index = 17 + send_index;
        ):(
      bus_index == 4             ? (slider_index = 25 + send_index;
        ););););
      */
      
      slider_index = 25  + send_index;
      gfx_mode = 1;        
      //debug_slider = max(debug_slider, slider_index);
      //invertColor();
      param_value = slider(slider_index);
      param_normalized_value = 1 + param_value / 96;         
      drawKnob(param_normalized_value, x);
      //gfx_mode = 1;
      //invertColor();     
      //NAME
      gfx_measurestr(this.send_name[send_index - 1], text_width, text_height);     
      //gfx_x = x + knob.width_half - text_width;
      gfx_x = x + 4;
      gfx_y += knob.height_half - font.size_half - 2; 
      invertColor();       
      gfx_drawstr(this.send_name[send_index - 1]);
      
      
      //VALUE
      //gfx_mode = 1;
      invertColor();
      gfx_measurestr(sprintf(#tmp,"%+.1f", slider(slider_index)), text_width, text_height);
      gfx_x = x + knob.width - text_width;
      gfx_drawstr(#tmp);
      //gfx_drawstr(" | "); gfx_drawnumber(slider(slider_index), 1); //gfx_drawstr(" dB");
      
      
      //Debug
      //gfx_drawstr(" | slider");gfx_drawnumber(slider_index, 0); gfx_drawstr(" | send");gfx_drawnumber(send_index, 0);
      
      gfx_y += knob.height_half + font.size_half + knob.v_spacing_half;
      //gfx_mode = 0;
      
      
      
      
      gfx_mode = 1;
      //Debug
      //gfx_drawstr(" pan slider");gfx_drawnumber(slider_index, 0); gfx_drawstr(" | send");gfx_drawnumber(send_index, 0);
      
      gfx_y += knob.height_half + knob.v_spacing;
      //camaieuColor(0.1);      
      send_index += 1;
    );
    
    
    
    //camaieuColor(0.05);
   // bus_index += 1;
  
   
   
     
   /*
   display.stateQuery(display._TOUCH) ? 
     (
     mouse.Hover();
     );      
   */
  //gfx_mode = 0;
  window.drawn_mixer_height = gfx_y + knob.v_spacing;    
  display.stateOff(display._REFRESH_GFX); //GUI refresh all done
  //Debug.drawWindow_debug_count += 1;
  );

/*******************************************************************
  mapItem     
  --------
  
  draw item in offscreen buffer map
  encode knob id in its color
  query map by getting pixel and checking color
  
  gfx_g = 1;    => Fader
  gfx_g = 0.1;  => Pan
  gfx_g = 0.2;  => Bus
  
  gfx_b => slider number
  
*******************************************************************/
function mapItem(x, y, width, height, bus, index, type)
  local(r, g, b)
  (
  gfx_dest = 1;
  r = gfx_r; g = gfx_g; b = gfx_b; //store current color, just in case
  
  //gfx_r = (bus + 1) / 255; 
  gfx_r = 0;  gfx_g = type / 255; gfx_b = index / 255; //gfx_g = (type + 1) / 255; gfx_b = (index + 1) / 255; <<---- to use with Reaperx86
  
  //debug_type = gfx_g;
  
  gfx_a = 1;  
  //gfx_rect(x, y, width, height);
  gfx_gradrect(x, y, width, height, 0, gfx_g, gfx_b, 1, 1 / knob.width, 0, 0, 0, 0, 0, 0, 0); 
  //gfx_rect(x, y, width, height);
  gfx_r = r; gfx_g = g; gfx_b = b;
  gfx_dest = -1;
  //this.knob_count += 1;
  
  //debug_knob_map_count = index;
  );
  
/*******************************************************************
  drawMap     
  --------
  
  draw/refresh offscreen buffer map
  
*******************************************************************/ 
function drawMap()
  local(bus_index, send_index, slider_index, x)
  (
  //init offscreen buffer for knob map
  gfx_dest = 1; 
  gfx_mode = 0;
  gfx_setimgdim(1, window.width, window.height);
  setColor(255, 0, 0);
  gfx_rect(0, 0, window.width, window.height); 
  
  
  bus_index = 1;
  ////////////////////////////////// BUSSES //////////////////////////////////
  ////
      
    gfx_y = margin.top; send_index = 1;
    x = margin.left + knob.h_spacing * (bus_index - 1 ) + knob.width * (bus_index - 1);    
    
    //gfx_y += knob.height + knob.height_third * 2 + (knob.height  * knob.big_multiplier ) / 2 - font.size_half - 2;
    
    gfx_y += knob.height;
     
    ////////////////////////////////// SENDS //////////////////////////////////
    ////     
    loop(window.send_count,
      
      //KNOB     
      slider_index = 25 + send_index;
        
      mapItem(x, gfx_y, knob.width, knob.height, bus_index, slider_index, _TYPE_KNOB);
      
      gfx_y += knob.height_half - font.size_half - 2 + knob.height_half + font.size_half + knob.v_spacing_half;
      
      
      
      gfx_y += knob.height_half + knob.v_spacing;
      
      send_index += 1;  
      );
      
  
    
  //Debug.drawMap_debug_count += 1;
  gfx_dest = -1;   
  ); 


/*******************************************************************
  drawMeters     
  --------
  
*******************************************************************/ 
function drawMeters()
(
//display.stateQuery(display._REFRESH_METERS) ?
//  (


gfx_mode = 0;
vuWidth = (gfx_w / 9);
//dBstep = floor(((6*gfx_w)/dbMin) + 0.5);//JFB ??

uiTop = window.drawn_mixer_height + gfx_texth + 4;
  
//vuHeight = (gfx_h - uiTop)/(num_ch);
uiTop = vuHeight = gfx_texth + 1;
 
    // default master peak
      gfx_r=1;gfx_g=1;gfx_b=1;gfx_a=0.8;
      gfx_x=gfx_w;
      gfx_y=1; //JFB!!!
      gfx_rectto(gfx_w - floor(gfx_w/uiWidthRatio + 0.5) , uiTop - 1);
      gfx_r=0;gfx_g=0;gfx_b=0;
      gfx_x=gfx_w-1;
      gfx_y=2; //JFB!!!
      gfx_rectto(gfx_w - floor(gfx_w/uiWidthRatio + 0.5) +1, uiTop - 2);

  i=0;
  loop
  (
    8, //num_ch,
    color_offset = (i - 1) / 100;
    
    //Full green rectangle //(i == (slider64 - 1)
    //gfx_r = 0.58 - i / 50; gfx_g = (i == 0) | (i == 1) ? 1 : 0.23; gfx_b = 0.1 + (i - 1) / 20; gfx_a = 0.8;
    gfx_r = 0.25 - (i - 1) / 50; gfx_g = (i == 0) | (i == 1) ? 1 : 0.1; gfx_b = 0.2 + (i - 1) / 20; gfx_a = 0.75;
    gfx_x=0; gfx_y = uiTop + vuHeight*i;
    gfx_rectto(gfx_w,gfx_y + vuHeight-1);

    // Black rectangle according to peak
    gfx_r = 0.05 ; gfx_g = 0.05 ; gfx_b = 0.05 + color_offset; gfx_a = 1;
    gfx_x = gfx_w + 1;
    gfx_y = uiTop + vuHeight * i;
    gfx_rectto(gfx_w - floor((abs(bufValue[i])*gfx_w)/dbMin + 0.5) , gfx_y + vuHeight);
  
    // Channel number
    vuHeight >= gfx_texth ?
    (
      gfx_x=5; //JFB!!!
      gfx_y=uiTop + vuHeight* i + floor(abs(gfx_texth-vuHeight)/2 + 0.5) - 1;
      
      bufPeak[i] > (dbMin*-1) ? gfx_a = 0.8 : gfx_a = 0.3;
      
      gfx_a = 0.8; gfx_r = 1; gfx_g = 1;gfx_b = 0;
      
      gfx_drawnumber(i+1,0);
      gfx_x= 20;
      gfx_drawstr(pin_name[i]);
    );
  
    // max dB
    vuHeight >= gfx_texth ?
    (
      gfx_x = gfx_w - uiRightMargin;
      gfx_y=uiTop + vuHeight*i + floor(abs(gfx_texth-vuHeight)/2 + 0.5);
      gfx_r=1;gfx_g=1;gfx_b=1;
      bufPeak[i] > (dbMin*-1) ? gfx_a = 0.8 : gfx_a = 0.3;
      //gfx_drawnumber(bufPeak[i],1);
      sprintf(#tmp,"%+9.1f", bufPeak[i]);
      gfx_drawstr(#tmp);
    );
  
    // peaks
    bufPeak[i] == 0 || bufPeak[i] > 0 ? //JFB ">=" KO when "-0.0" !!
    (
      gfx_x=gfx_w;gfx_y=uiTop + vuHeight*i;
      gfx_r=1;gfx_g=0.0;gfx_b=0.0;gfx_a=1;
      gfx_rectto(gfx_w - floor(gfx_w/uiWidthRatio + 0.5) , gfx_y + vuHeight - 1);

      // master peak
      gfx_x=gfx_w-1;
      gfx_y=uiTop - 20; //JFB!!!
//JFB      gfx_y = floor(abs(gfx_texth-uiTop)/2 + 0.5);
      gfx_rectto(gfx_w - floor(gfx_w/uiWidthRatio + 0.5) +1, /*JFB gfx_y + */uiTop - 2);
    );

    // "dB"
    vuHeight > gfx_texth && dBstep > (uiCharWidth*4 + uiRightMargin) ? // e.g. 4 'cause "-6" & "dB"
    (
      gfx_x = gfx_w - uiRightMargin;
//JFB      gfx_y = floor(abs(gfx_texth-vuHeight)/2 + 0.5);
      gfx_y = floor(abs(gfx_texth-uiTop)/2 + 0.5);
      gfx_r=.5;gfx_g=.5;gfx_b=.5;gfx_a=0.8;
      gfx_drawchar($'d');
      gfx_drawchar($'B');
    );

    i+=1;
  );

  // dB lines
  gfx_r=.5;gfx_g=.5;gfx_b=.5;
  i=dbRulerStep;
  while
  (
    tmp = gfx_w - floor(((i*gfx_w)/dbMin) + 0.5);

    gfx_a=0.1;
    gfx_x = tmp; gfx_y=uiTop;
    gfx_lineto(gfx_x, margin.top, 0.4);

    gfx_a=0.8;
/*JFB
    vuHeight > gfx_texth && dBstep > 10 * 3 ? // e.g. 3 'cause "-60" JFB!!! charWidth !
    (
*/
      gfx_x = tmp + 1;
      gfx_y = floor(abs(gfx_texth-uiTop)/2 + 0.5);
      gfx_drawnumber(i*-1,0);
//    );
    i+=dbRulerStep;
    i <= dbMin;
  );

  // top H line
/*JFB
  gfx_x = 0; gfx_y=vuHeight;
  gfx_lineto(gfx_w,vuHeight, 0.4);
*/


  mouse_cap > 0 && ((cpt - last_clic) > CLIC_TRES) ?
  (
     last_clic = cpt;
     mouse_x >= (gfx_w - uiRightMargin) && mouse_x <= gfx_w ?
     (
        tmp = (mouse_y / vuHeight) | 0;
        AA=tmp;
  
        // Clear all peaks
        tmp == 0 ?
        (
          i=0;
          loop
          (
            8, //MAX_CH,
            bufPeak[i] = dbMin * -1;
            i+=1;
          );
        )
        : bufPeak[tmp - 1] = dbMin * -1;
     )
     //: slider62 < 4 ? slider62 += 1 : slider62 = 0;
  );
  
  //display.stateOn(display._REFRESH_GFX); //flag for GUI refresh <<-- NOT BOTHERING TO REFRESH METERS AND MIXER AT DIFFERENT RATE ATM
// );
);

  
/*******************************************************************
  clickKnob     
  --------
  
  Uses the gradients in buffer map at the moment
  
*******************************************************************/  
function clickKnob(param_normalized_value, type, slider_index)
  local(param_value)//, slider_mask)
  (
  type == _TYPE_PAN ?
    (
    param_value = param_normalized_value / 255 * 201 - 100;
    ):(
    param_value = param_normalized_value / 255 * 96 - 96;
    );
  
  
  //slider_mask = $xFFFFFFFFFFFFFFFF;
  ;
  
  //debug_slidindex = slider_index;
  //bitToggle(slider_mask, slider_index);
  //sliderchange($xFFFFFFFFFFFFFFFF);
  //debug_slider_mask = slider_mask;
  
  //$~7
  slider(slider_index) = param_value;
  slidersInputUpdate();  
  );
 
/*******************************************************************
  dragKnob     
  --------
  
  Works for dragging beyond the fader/knob boundaries
  
  Registers up and down motions
  
*******************************************************************/  
function dragKnob(type) // param_normalized_value,slider_index) <== Use mouse.param_focus
  local(delta, slider_value)//, slider_mask)
  (
  
  slider_value = slider(mouse.param_focus);
  
  type == _TYPE_PAN ?
    (
    delta = ((mouse_x - mouse.x_focus) - (mouse_y - mouse.y_focus)) / knob.width * 200 * mouse.knob_speed;
    slider_value = max(-100, min(100, slider_value + delta));
    ):(
    delta = ((mouse_x - mouse.x_focus) - (mouse_y - mouse.y_focus)) / knob.width * 96 * mouse.knob_speed;
    slider_value = max(-96, min(0, slider_value + delta));
    );
 
  /* 
  mouse.knob_speed == _SPEED_PRECISE ?
  (
  delta = floor(((mouse_x - mouse.x_focus) - (mouse_y - mouse.y_focus)) / 5) * _SPEED_PRECISE; //Doesn't Work as expected
  debug.delta = delta;
  slider_value = roundDownTo(slider_value, 0.1);
  
  type == _TYPE_PAN ?
      (
      slider_value = max(-100, min(100, slider_value + delta));
      ):(
      slider_value = max(-96, min(0, slider_value + delta));
      );
  
  ):(
  type == _TYPE_PAN ?
    (
    delta = ((mouse_x - mouse.x_focus) - (mouse_y - mouse.y_focus)) / knob.width * 200 * mouse.knob_speed;
    slider_value = max(-100, min(100, slider_value + delta));
    ):(
    delta = ((mouse_x - mouse.x_focus) - (mouse_y - mouse.y_focus)) / knob.width * 96 * mouse.knob_speed;
    slider_value = max(-96, min(0, slider_value + delta));
    );
  );
 */
  
  //slider_mask = 0; 
  
  //sliderchange(bitToggle(slider_mask, mouse.param_focus));
  
  //slider_value = roundToNearestMultiple(slider_value, 0.1);
  
  //slider_value = floor(slider_value * 10) / 10;
  //slider_value = roundDownTo(slider_value, 0.1);
  
  slider(mouse.param_focus) = slider_value;
  slidersInputUpdate();
  
  //Debug.dragKnobCount += 1;
  );

/*******************************************************************
  resetKnob     
  --------
  
  restore default knob value
  
*******************************************************************/  
function resetKnob(param_normalized_value, type, slider_index)
  local(param_value)//, slider_mask)
  (
  type == _TYPE_PAN ?
    (
    slider(slider_index) = 0;
    ):(
    slider(slider_index) = -96;
    );
  
  type == _TYPE_PAN           ? ( slider(slider_index) =   0;
    ):(
  type == _TYPE_BUS           ? ( slider(slider_index) =   0;
    ):(
                                  slider(slider_index) = -96; 
    ););
  
  //slider_mask = 0;  
  //sliderchange(bitToggle(slider_mask, slider_index));
  slidersInputUpdate();  
  );

#send_1  = "1     GTR 1";
#send_2  = "2    GTR 2";
#send_3  = "3    GTR 3";
#send_4  = "4    SM57";
#send_5  = "5";
#send_6  = "6";
#send_7  = "7    SYN L";
#send_8  = "8    SYN R";

// 4 BUSSES
#bus_1  = "INPUTS";
/*
#bus_2  = "[ WET ]";
#bus_3  = "[ TIME ]";
#bus_4  = "[ INPUT ]";
*/
//QnD Memory Alloc
window.send_name = 256;
window.bus_name  = 320;
_COLOR = 384;

window.send_name[0] = #send_1;
window.send_name[1] = #send_2;
window.send_name[2] = #send_3;
window.send_name[3] = #send_4;
window.send_name[4] = #send_5;
window.send_name[5] = #send_6;
window.send_name[6] = #send_7;
window.send_name[7] = #send_8;


window.bus_name[0]  = #bus_1;
/*
window.bus_name[1]  = #bus_2;
window.bus_name[2]  = #bus_3;
window.bus_name[3]  = #bus_4;
*/

window.bus_count  = 1;
window.send_count = 8;

_TYPE_KNOB = 1;
_TYPE_PAN  = 2;
_TYPE_BUS  = 3; 

_SPEED_FAST     = 2;
_SPEED_DEFAULT  = 1;
_SPEED_SLOW     = 0.25;
_SPEED_PRECISE  = 0.1; //0.05;

_COLOR_BG = 0.03;

//TRACK COLOR
_COLOR[0]  = packRGB( 85,     0,  170);
_COLOR[1]  = packRGB(   0,  128,  255);

window.track_color = 0;

font.name = "HaxrCorp S8";

_MARGIN_TOP  =  5;
_MARGIN_LEFT =  5;
_H_SPACING   =  15;
_V_SPACING   =  0;

knob.opacity           =  0.5;
knob.txt_opacity       =    1;
knob.big_multiplier    =  1.5;
knob.height_multiplier =  2;

mouse.param_focus = 0;
mouse.knob_speed = _SPEED_DEFAULT;

display.stateInit();
display._REFRESH_GFX = display.stateAlloc();
display._BUFFER_MAP = display.stateAlloc();
//display._VALUE = display.stateAlloc();
display._REFRESH_METERS = display.stateAlloc();

display.refresh_interval = 1000 / 1000;
display.time.now = display.time.last_update = time_precise();

display.stateOn(display._REFRESH_GFX); //flag for GUI refresh


////////////////////////////////// METERS //////////////////////////////////
ext_noinit = 1;
MAX_CH = 8;
sc = 6 / log(2);
dbMin = 60; //JFB 305.885547;
dbRulerStep = 6;
CLIC_TRES = 200 * srate / 1000;  //JFB hidden!!

bufCh = 0;
bufPeak = MAX_CH; // i.e. after bufCh
bufValue = MAX_CH * 2;
coordinatelist = MAX_CH * 3;   //JFB

memset(bufCh, dbMin * -1, MAX_CH);
memset(bufPeak, dbMin * -1, MAX_CH);
memset(bufValue, dbMin * -1, MAX_CH);


uiTop = 1;
uiLeft = 1;
uiCharWidth = 10;
uiRightMargin = 45;
uiWidthRatio = 75;

//QnD Memory Alloc
pin_name = 192; //crude memAlloc

n = 0;
loop(64,
  pin_name[n] = n;
  n += 1;
  );
strcpy(pin_name[0],  "GTR 1");
strcpy(pin_name[1],  "GTR 2");
strcpy(pin_name[2],  "GTR 3");
strcpy(pin_name[3],  "SM57");
strcpy(pin_name[4],  "5");
strcpy(pin_name[5],  "6");
strcpy(pin_name[6],  "SYN L");
strcpy(pin_name[7],  "SYN R");

/////////////////////////////////////////////////////////////////////////////

@slider
//DEBUG RANDOM VALUES ON INIT FOR SLIDERS
/*
debug_slider_index = 1;
loop(34,
  slider(debug_slider_index) = -debug_slider_index * 2; //-rand(96);
  debug_slider_index += 1;
);

loop(30,
  slider(debug_slider_index) = rand(200) - 100; //-rand(96);
  debug_slider_index += 1;
);
*/
slidersInputUpdate();

//Debug.CallSlidersCount += 1;
////////////////////////////////// METERS //////////////////////////////////
sampletime = 45 * srate / 1000;  //JFB hidden!! 45<25,1000,1>-sample time (ms)
//channel_highlight = min(MAX_CH, min(8, 1)) | 0; //1<1,64,1>-Highlight channel (0 = disabled)

////////////////////////////////// METERS //////////////////////////////////
@block
display.stateQuery(display._REFRESH_METERS) ?
  (
bscnt > sampletime ?
(
    bufCh[0] = bufCh0;
    bufCh[1] = bufCh1;
    bufCh[2] = bufCh2;
    bufCh[3] = bufCh3;
    bufCh[4] = bufCh4;
    bufCh[5] = bufCh5;
    bufCh[6] = bufCh6;
    bufCh[7] = bufCh7;
    
       

    j=0;
    while
    (
      bufValue[j] = log(bufCh[j]) * sc;
      bufPeak[j]  = max(bufPeak[j], bufValue[j]);
//JFB      bufCh[j] = 0;
      j+=1;
      j < 8; //num_ch - 2;
    );
    
    bscnt=0;
    
    bufCh0 = 0;
    bufCh1 = 0;
    bufCh2 = 0;
    bufCh3 = 0;
    bufCh4 = 0;
    bufCh5 = 0;
    bufCh6 = 0;
    bufCh7 = 0;
    

);
bscnt += samplesblock;
cpt += samplesblock; //JFB for clic only!


);
//display.stateOn(display._REFRESH_GFX); //flag for GUI refresh 
//sliderchange($xFFFFFFFFFFFFFFFF);
@sample

////RETRIEVE 
//spl9 = spl0;
//spl9 = spl1;
//slider_automate(slider4);

//bus_4

/*spl0   =  spl2  * bus_4_send_1;
spl1   =  spl3  * bus_4_send_2;
spl2   =  spl4  * bus_4_send_3;
spl3   =  spl5  * bus_4_send_4;
spl4   =  spl6  * bus_4_send_5;
spl5   =  spl7  * bus_4_send_6;
spl6   =  spl8  * bus_4_send_7;
spl7   =  spl9  * bus_4_send_8;
*/
spl0  *= bus_4_send_1;
spl1  *= bus_4_send_2;
spl2  *= bus_4_send_3;
spl3  *= bus_4_send_4;
spl4  *= bus_4_send_5;
spl5  *= bus_4_send_6;
spl6  *= bus_4_send_7;
spl7  *= bus_4_send_8;


display.stateQuery(display._REFRESH_METERS) ?
  (
bufCh0 = max(bufCh0,abs(spl0));
bufCh1 = max(bufCh1,abs(spl1));
bufCh2 = max(bufCh2,abs(spl2));
bufCh3 = max(bufCh3,abs(spl3));
bufCh4 = max(bufCh4,abs(spl4));
bufCh5 = max(bufCh5,abs(spl5));
bufCh6 = max(bufCh6,abs(spl6));
bufCh7 = max(bufCh7,abs(spl7));

);
@gfx 300 310
/*******************************************************************
// MOUSE EVENTS  -------- MOUSE EVENTS  -------- MOUSE EVENTS  --------
*******************************************************************/

  /*
  // MOUSE WHEEL ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  mouse_wheel != 0 && mouse_cap == 0 ?
    (
    //colorAdjust(mouse_wheel);
    time_precise(time.scroll.in);
    mouse.Scroll(mouse_wheel);
    time_precise(time.scroll.out);
    );
  
  // SHIFT + MOUSE WHEEL ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  mouse_wheel != 0 && mouse_cap == 8 ?
    (
    0;
    );
    
  // CONTROL + MOUSE WHEEL ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  mouse_wheel != 0 && mouse_cap == 4 ?
    (
    0;
    );    

    
  // ALT + MOUSE WHEEL ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  mouse_wheel != 0 && mouse_cap == 16 ?
    (
    0;
    );
  */
  
  
  //SHIFT + RIGHT CLICK---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  //mouse_state == 0 && mouse_cap == 2 && mouse_x > 5 && mouse_x < gfx_w - 5 && mouse_y > 5 && mouse_y < gfx_h - 5 ? (
  mouse_state == 0 && mouse_cap == 10 ? (
    mouse_state = 1;
    
    display.stateToggle(display._BUFFER_MAP);
    display.stateOn(display._REFRESH_GFX); //flag for GUI refresh

  );
  
  /*
  //CTRL + RIGHT CLICK---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  //mouse_state == 0 && mouse_cap == 2 && mouse_x > 5 && mouse_x < gfx_w - 5 && mouse_y > 5 && mouse_y < gfx_h - 5 ? (
  mouse_state == 0 && mouse_cap == 6 ? (
    mouse_state = 1;
    
    window.track_color < 15 ? 
      (
      window.track_color += 1;
      ):(
      window.track_color = 0;
      );
  
  
  );
  */
  //RIGHT CLICK---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  //mouse_state == 0 && mouse_cap == 2 && mouse_x > 5 && mouse_x < gfx_w - 5 && mouse_y > 5 && mouse_y < gfx_h - 5 ? (
  mouse_state == 0 && mouse_cap == 2 ? (
    mouse_state = 1;
    
    
    display.stateToggle(display._REFRESH_METERS);
    window.initWindow();
    //>>>>> REDRAW MAP BUFFER HERE !!!!!!!!!!!!!!!! NOT ELSEWHERE !!!!!!!!!!!!! <<<
    map.drawMap();
  );
  
  // LEFT CLICK---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  mouse_state == 0 && mouse_cap == 1 ? ( //&& mouse_x > 5 && mouse_x < gfx_w - 5 && mouse_y > 5 && mouse_y < gfx_h - 5 ? (
    mouse_state = 1;
    
    mouse.knob_speed = _SPEED_DEFAULT;
    
    gfx_dest = 1;
    gfx_x = mouse_x; gfx_y = mouse_y;
    gfx_getpixel(offscreen_r, offscreen_g, offscreen_b);
    
    offscreen_r = ceil(255 * offscreen_r);
    offscreen_g = ceil(255 * offscreen_g);
    offscreen_b = ceil(255 * offscreen_b);
    
    
    //Knob/Pan/Bus events
    offscreen_g == _TYPE_KNOB ? //|| offscreen_g == _TYPE_BUS || offscreen_g == _TYPE_PAN ?
      (
      clickKnob(offscreen_r, offscreen_g, offscreen_b);
      mouse.param_focus = offscreen_b; //Only change focus on CLICK. This allows left dragging to stay focused.
      mouse.x_focus = mouse_x;
      mouse.y_focus = mouse_y;
      );  
        
    gfx_dest = -1;
    display.stateOn(display._REFRESH_GFX); //flag for GUI refresh
   
  );
  
  
  
  // DRAG LEFT CLICKED ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  mouse_state == 1 && mouse_cap == 1  && mouse.param_focus ? (
       
    gfx_dest = 1;
    gfx_x = mouse_x; gfx_y = mouse_y;
    
    
    
    /* NO NEED THE CLICK TOOK CARE OF THAT
    gfx_getpixel(offscreen_r, offscreen_g, offscreen_b);
      
    offscreen_r = 255 * offscreen_r; //Let's try without the Ceil()
    offscreen_g = 255 * offscreen_g; 
    offscreen_b = 255 * offscreen_b;
    */
    //Knob/Pan/Bus events
    //mouse.param_focus > 0 ? ( ):
    dragKnob(offscreen_g); 
      
    mouse.x_focus = mouse_x;
    mouse.y_focus = mouse_y;          
    gfx_dest = -1;
    display.stateOn(display._REFRESH_GFX); //flag for GUI refresh
    
    //debug_focus += 1;
    );
  
  // SHIFT LEFT CLICK---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  mouse_state == 0 && mouse_cap == 9 ? (
    mouse_state = 1;
    
    mouse.knob_speed = _SPEED_SLOW;
    
    gfx_dest = 1;
    gfx_x = mouse_x; gfx_y = mouse_y;
    gfx_getpixel(offscreen_r, offscreen_g, offscreen_b);
    
    offscreen_r = ceil(255 * offscreen_r);
    offscreen_g = ceil(255 * offscreen_g);
    offscreen_b = ceil(255 * offscreen_b);
    
    
    //Knob/Pan/Bus events
    //clickKnob(offscreen_r, offscreen_g, offscreen_b); //NO JUMP TO CLICKED VALUE ON SLOW/PRECISE MODE.
    mouse.param_focus = offscreen_b; //Only change focus on CLICK. This allows left dragging to stay focused.
    mouse.x_focus = mouse_x;
    mouse.y_focus = mouse_y;
 
        
    gfx_dest = -1;
    display.stateOn(display._REFRESH_GFX); //flag for GUI refresh
  );
  
  // ALT LEFT CLICK---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  mouse_state == 0 && mouse_cap == 17 ? (
    mouse_state = 1;
    
    mouse.knob_speed = _SPEED_PRECISE;
    
    gfx_dest = 1;
    gfx_x = mouse_x; gfx_y = mouse_y;
    gfx_getpixel(offscreen_r, offscreen_g, offscreen_b);
    
    offscreen_r = ceil(255 * offscreen_r);
    offscreen_g = ceil(255 * offscreen_g);
    offscreen_b = ceil(255 * offscreen_b);
    
    
    //Knob/Pan/Bus events
    offscreen_g == _TYPE_KNOB || offscreen_g == _TYPE_BUS || offscreen_g == _TYPE_PAN ?
      (
      //clickKnob(offscreen_r, offscreen_g, offscreen_b); //NO JUMP TO CLICKED VALUE ON SLOW/PRECISE MODE.
      mouse.param_focus = offscreen_b; //Only change focus on CLICK. This allows left dragging to stay focused.
      mouse.x_focus = mouse_x;
      mouse.y_focus = mouse_y;
      );  
        
    gfx_dest = -1;
    display.stateOn(display._REFRESH_GFX); //flag for GUI refresh
  ); 
  
  /*
  // DRAG ALT + LEFT CLICKED ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  mouse_state == 1 && mouse_cap == 17 ? (
    
    mouse.knob_speed = _SPEED_PRECISE;
    
    gfx_dest = 1;
    gfx_x = mouse_x; gfx_y = mouse_y;
    gfx_getpixel(offscreen_r, offscreen_g, offscreen_b);
      
    offscreen_r = 255 * offscreen_r; //Let's try without the Ceil()
    offscreen_g = 255 * offscreen_g; 
    offscreen_b = 255 * offscreen_b;
    
    //Knob/Pan/Bus events
    offscreen_g == _TYPE_KNOB || offscreen_g == _TYPE_BUS || offscreen_g == _TYPE_PAN ?
      (
      //dragKnob(offscreen_r, offscreen_g, offscreen_b);
      0;
      );          
      gfx_dest = -1;
      display.stateOn(display._REFRESH_GFX); //flag for GUI refresh
  );
  */
  
  // DRAG SHIFT | ALT + LEFT CLICKED ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  mouse_state == 1 && (mouse_cap == 9 || mouse_cap == 17) && mouse.param_focus ? (
        
    gfx_dest = 1;
    gfx_x = mouse_x; gfx_y = mouse_y;
    
    /* NO NEED THE CLICK TOOK CARE OF THAT
    gfx_getpixel(offscreen_r, offscreen_g, offscreen_b);
      
    offscreen_r = 255 * offscreen_r; //Let's try without the Ceil()
    offscreen_g = 255 * offscreen_g; 
    offscreen_b = 255 * offscreen_b;
    */
    
    //Knob/Pan/Bus events
    dragKnob(offscreen_g);
      
    mouse.x_focus = mouse_x;
    mouse.y_focus = mouse_y;          
    gfx_dest = -1;
    display.stateOn(display._REFRESH_GFX); //flag for GUI refresh
  );
  
  // CTRL + LEFT CLICK---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  mouse_state == 0 && mouse_cap == 5 ? ( 
    mouse_state = 1;
    
    gfx_dest = 1;
    gfx_x = mouse_x; gfx_y = mouse_y;
    gfx_getpixel(offscreen_r, offscreen_g, offscreen_b);
    
    offscreen_r = ceil(255 * offscreen_r);
    offscreen_g = ceil(255 * offscreen_g);
    offscreen_b = ceil(255 * offscreen_b);
    
    
    //Knob/Pan/Bus events
    offscreen_g == _TYPE_KNOB || offscreen_g == _TYPE_BUS || offscreen_g == _TYPE_PAN ?
      (
      resetKnob(offscreen_r, offscreen_g, offscreen_b);
      mouse.param_focus = offscreen_b; //Only change focus on CLICK. This allows left dragging to stay focused.
      mouse.x_focus = mouse_x;
      mouse.y_focus = mouse_y;
      );  
        
    gfx_dest = -1;
    display.stateOn(display._REFRESH_GFX); //flag for GUI refresh
  );
    
  // MIDDLE CLICK---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  mouse_state == 0 && mouse_cap == 64 ? ( //&& mouse_x > 5 && mouse_x < gfx_w - 5 && mouse_y > 5 && mouse_y < gfx_h - 5
    mouse_state = 1;
    
    knob.height_multiplier < 6 ?
      (
      knob.height_multiplier += 0.5;
      ):(
      knob.height_multiplier = 1.5;
      );
    
    window.width = -1; //FORCE RE-INIT
  );
    

  // RELEASE ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
  mouse_cap == 0 ? 
    (
    mouse_state = 0;
    
    // When < 0 you know shit has been released, but "storing" last touched as a negative number      
    //mouse.x_focus = - abs(mouse.x_focus);
    //mouse.y_focus = - abs(mouse.y_focus);
    //mouse.param_focus = - abs(mouse.param_focus);
    mouse.param_focus = 0;
    mouse.knob_speed = _SPEED_DEFAULT;
    );
    
    
    
//Resize Event or Track Channel Count Change Event
(window.width != gfx_w) || (window.height != gfx_h)  ? //|| (window.channel_count != num_ch) ?
  (  
  window.initWindow();
  //>>>>> REDRAW MAP BUFFER HERE !!!!!!!!!!!!!!!! NOT ELSEWHERE !!!!!!!!!!!!! <<<
  map.drawMap();
  );


//Refresh Rate

time_precise(display.time.now);
(display.time.now - display.time.last_update) >= display.refresh_interval ?
  (
  display.time.last_update = display.time.now;
  display.stateOn(display._REFRESH_GFX); //flag for GUI refresh 
  );   


//display.stateOn(display._REFRESH_GFX); //flag for GUI refresh <<-- NOT BOTHERING TO REFRESH METERS AND MIXER AT DIFFERENT RATE ATM
//Draw Interface
display.stateQuery(display._REFRESH_GFX) ? //due for GUI refresh ?
  (
  
  window.drawWindow();
  
  //display.stateQuery(display._REFRESH_METERS) == 0 ? drawMeters();
  
  //DEBUG BUFFER MAP
  
  display.stateQuery(display._BUFFER_MAP) ? 
    (
    
    //Draw Background
    //gfx_r = gfx_g = gfx_b = 0.14;
    //gfx_a = 0;
    //gfx_rect(0, 0, window.width, window.height);
    
    gfx_a = 0.80;
    gfx_x = 0; gfx_y = 0;
    gfx_blit(1, 1, 0);
    
    setColor(128, 255, 255);
    gfx_dest = 1;
    gfx_x = mouse_x; gfx_y = mouse_y;
    gfx_getpixel(rr, gg, bb);
    gfx_dest = -1;
    gfx_drawstr("     ");
    gfx_drawnumber(rr * 255, 5); gfx_drawstr(" | ");
    gfx_drawnumber(gg * 255, 5); gfx_drawstr(" | ");
    gfx_drawnumber(bb * 255, 5);
    setColor(0, 0, 0);
    gfx_drawstr(" | display.state ");gfx_drawnumber(display.state, 5);   
    display.stateOn(display._REFRESH_GFX); //flag for GUI refresh   
    );
  ); 

display.stateQuery(display._REFRESH_METERS) ? 
  (
  drawMeters();
  display.stateOn(display._REFRESH_GFX);
  );

/*******************************************************************************
*  2015 Greg Z. - borrowing left and right                                     *
*  This program is free software: you can redistribute it and/or modify        *
*  it under the terms of the GNU General Public License as published by        *
*  the Free Software Foundation, either version 3 of the License, or           *
*  (at your option) any later version.                                         *
*                                                                              *
*  This program is distributed in the hope that it will be useful,             *
*  but WITHOUT ANY WARRANTY; without even the implied warranty of              *
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                *
*  GNU General Public License (http://www.gnu.org/licenses/)for more details.  *
*******************************************************************************/

desc:input hpf/lpf from Schwa, output Chebyshev from Liteon, Garbage Out

slider1:0<0,1000,10>HPF
slider2:22000<1000,22000,100>LPF
slider3:0<-20,20,0.1>Input Gain

slider4:0<0,8,1{NO,HALF,FULL,PARTIAL-A,PARTIAL-B,SHAPEABLE-A,SHAPEABLE-B,SHAPEABLE-C,SHAPEABLE-D}>RECTIFY
slider5:0<0,100,.1>PARTIAL LEVEL
slider6:0<0,100,.1>POS SHAPE
slider7:0<0,100,.1>NEG SHAPE
slider8:0<0,2,1{NO,YEP}>REMOVE DC OFFSET
slider9:0<0,2,1{NO,YEP}>INTERMEDIATE DC OFFSET



slider16:0<-96,6,0.1>DRY (dB)
slider17:0<-96,6,0.1>WET (dB)

@init
//|||||||||||||||||||||||||||||INPUT FILTER|||||||||||||||||||||||||||||
  hpf = 0;
  gain1 = 0;
  freq1 = slider1;
  a1 = 1;
  s1 = 1;
  q1 = 1 / (sqrt((a1 + 1/a1)*(1/s1 - 1) + 2));
  w01 = 2 * $pi * freq1/srate;
  cosw01 = cos(w01);
  sinw01 = sin(w01);
  alpha1 = sinw01 / (2 * q1);

  b01 = (1 + cosw01)/2;
  b11 = -(1 + cosw01);
  b21 = (1 + cosw01)/2;
  a01 = 1 + alpha1;
  a11 = -2 * cosw01;
  a21 = 1 - alpha1;
  b01 /= a01;
  b11 /= a01;
  b21 /= a01;
  a11 /= a01;
  a21 /= a01;

  lpf = 0;
  gain3 = 0;
  freq3 = 22000;
  a3 = 10^(gain3/40);
  s3 = 2;
  q3 = 1 / (sqrt((a3 + 1/a3)*(1/s3 - 1) + 2));
  w03 = 2 * $pi * freq3/srate;
  cosw03 = cos(w03);
  sinw03 = sin(w03);
  alpha3 = sinw03 / (2 * q3);

  b03 = (1 - cosw03)/2;
  b13 = (1 - cosw03);
  b23 = (1 - cosw03)/2;
  a03 = 1 + alpha3;
  a13 = -2 * cosw03;
  a23 = 1 - alpha3;
  b03 /= a03;
  b13 /= a03;
  b23 /= a03;
  a13 /= a03;
  a23 /= a03;

  gain = 1;
//|||||||||||||||||||||||||||||RECTIFY|||||||||||||||||||||||||||||

//|||||||||||||||||||||||||||||DC OFFSET REMOVAL|||||||||||||||||||||||||||||
itm1=itm2=otm1=otm2=0;

//|||||||||||||||||||||||||||||OUTPUT FILTER|||||||||||||||||||||||||||||

//|||||||||||||||||||||||||||||MIX||||||||||||||||||||||||||||| 




@slider
//|||||||||||||||||||||||||||||INPUT FILTER|||||||||||||||||||||||||||||
  freq1 = slider1;
  freq3 = slider2;
  gain = 10^(slider3/20);

  slider1 == 0 ? hpf = 0 : hpf = 1;
  slider2 == 22000 ? lpf = 0 : lpf = 1;

  a1 = 1;
  s1 = 1;
  q1 = 1 / (sqrt((a1 + 1/a1)*(1/s1 - 1) + 2));
  w01 = 2 * $pi * freq1/srate;
  cosw01 = cos(w01);
  sinw01 = sin(w01);
  alpha1 = sinw01 / (2 * q1);

  b01 = (1 + cosw01)/2;
  b11 = -(1 + cosw01);
  b21 = (1 + cosw01)/2;
  a01 = 1 + alpha1;
  a11 = -2 * cosw01;
  a21 = 1 - alpha1;
  b01 /= a01;
  b11 /= a01;
  b21 /= a01;
  a11 /= a01;
  a21 /= a01;

  a3 = 1;
  s3 = 1;
  q3 = 1 / (sqrt((a3 + 1/a3)*(1/s3 - 1) + 2));
  w03 = 2 * $pi * freq3/srate;
  cosw03 = cos(w03);
  sinw03 = sin(w03);
  alpha3 = sinw03 / (2 * q3);

  b03 = (1 - cosw03)/2;
  b13 = (1 - cosw03);
  b23 = (1 - cosw03)/2;
  a03 = 1 + alpha3;
  a13 = -2 * cosw03;
  a23 = 1 - alpha3;
  b03 /= a03;
  b13 /= a03;
  b23 /= a03;
  a13 /= a03;
  a23 /= a03;
//|||||||||||||||||||||||||||||RECTIFY|||||||||||||||||||||||||||||

recto = slider4;

pos = min(slider6/100,.999); //remap to [0;0.999]
posfuz = 2*pos/(1-pos); // exp

neg = min(slider7/100,.95); //remap to [0;0.95]
negfuz = 2*neg/(1-neg); // exp


partial = slider5/100;

//|||||||||||||||||||||||||||||DC OFFSET REMOVAL|||||||||||||||||||||||||||||
dc_offset_removal = slider8;
mojo_dc_off = slider9;

//|||||||||||||||||||||||||||||OUTPUT FILTER|||||||||||||||||||||||||||||

//|||||||||||||||||||||||||||||MIX||||||||||||||||||||||||||||| 
dry = 2 ^ (slider16 / 6);
wet = 2 ^ (slider17 / 6);

@sample
spl0dry = spl0; //store dry value
spl1dry = spl1; //store dry value


//|||||||||||||||||||||||||||||INPUT FILTER|||||||||||||||||||||||||||||
  hpf != 0 ? (
  ospl0 = spl0;
  spl0 = b01 * spl0 + b11 * xl11 + b21 * xl21 - a11 * yl11 - a21 * yl21;
  xl21 = xl11;
  xl11 = ospl0;
  yl21 = yl11;
  yl11 = spl0;

  ospl1 = spl1;
  spl1 = b01 * spl1 + b11 * xr11 + b21 * xr21 - a11 * yr11 - a21 * yr21;
  xr21 = xr11;
  xr11 = ospl1;
  yr21 = yr11;
  yr11 = spl1;
  );

  lpf != 0 ? (
  ospl0 = spl0;
  spl0 = b03 * spl0 + b13 * xl13 + b23 * xl23 - a13 * yl13 - a23 * yl23;
  xl23 = xl13;
  xl13 = ospl0;
  yl23 = yl13;
  yl13 = spl0;

  ospl1 = spl1;
  spl1 = b03 * spl1 + b13 * xr13 + b23 * xr23 - a13 * yr13 - a23 * yr23;
  xr23 = xr13;
  xr13 = ospl1;
  yr23 = yr13;
  yr13 = spl1;
  );

  spl0 *= gain;
  spl1 *= gain;

//|||||||||||||||||||||||||||||RECTIFY|||||||||||||||||||||||||||||
recto == 1 ? // HALF
  (
  //spl0 < 0 ? spl0 = 0;
  //spl1 < 0 ? spl1 = 0;
  spl0 = max(spl0,0);
  spl1 = max(spl1,0);
  //spl0 += spl0; // probably should either remove or do that for full wave rectification too
  spl1 += spl1; //
  ) : (
  recto == 2 ? // FULL
    (
    spl0 = abs(spl0);
    spl1 = abs(spl1);
    ) : (
    recto == 3 ? // PARTIAL-A
      (
      spl0 < 0 ? 
        (
        spl0 = abs(spl0) * partial;
        );
      spl1 < 0 ? 
        (
        spl1 = abs(spl1) * partial;  
        );
       
      ) : (
      recto == 4 ? // PARTIAL-B
      (
        spl0 < 0 ? 
        (
        spl0 = abs(spl0) * partial;
        otm1=0.999*otm1 + spl0 - itm1; itm1=spl0; spl0=otm1;
        );
        spl1 < 0 ? 
        (
        spl1 = abs(spl1) * partial;  
        otm2=0.999*otm2 + spl1 - itm2; itm2=spl1; spl1=otm2;
        );
      
        ) : (
        recto == 5 ? // SHAPEABLE-A
          (
           spl0 < 0 ? 
            (
            spl0 = min(max(spl0,-1),1);
            spl0 = (1+posfuz)*spl0/(1+posfuz*abs(spl0));
            ) : (
            spl0 = min(max(spl0,-1),1);
            spl0 = abs((1+negfuz)*spl0/(1+negfuz*abs(spl0))) * partial; // Style-A
            mojo_dc_off == 1 ? 
              (
              otm1=0.999*otm1 + spl0 - itm1; itm1=spl0; spl0=otm1;
              );
            );
        
          spl1 < 0 ? 
            (
            spl1 = min(max(spl1,-1),1);
            spl1 = (1+posfuz)*spl1/(1+posfuz*abs(spl1));
            ) : (
            spl1 = min(max(spl1,-1),1);
            spl1 = abs((1+negfuz)*spl1/(1+negfuz*abs(spl1))) * partial;  // Style-A 
           mojo_dc_off == 1 ? 
             (        
             otm2=0.999*otm2 + spl1 - itm2; itm2=spl1; spl1=otm2;
             );
            );  
          ) : (
          
          recto == 6 ? // SHAPEABLE-B
            (
            spl0 < 0 ? 
              (
              spl0 = min(max(spl0,-1),1);
              spl0 = (1+posfuz)*spl0/(1+posfuz*abs(spl0));
              ) : (
              spl0 = min(max(spl0,-1),1);
              spl0 = 1 - ((1+negfuz)*spl0/(1+negfuz*abs(spl0)) * partial); // Style-B
              mojo_dc_off == 1 ? 
                (
                otm1=0.999*otm1 + spl0 - itm1; itm1=spl0; spl0=otm1;
                );
              );
          
            spl1 < 0 ? 
              (
              spl1 = min(max(spl1,-1),1);
              spl1 = (1+posfuz)*spl1/(1+posfuz*abs(spl1));
              ) : (
              spl1 = min(max(spl1,-1),1);
              spl1 = 1 - ((1+negfuz)*spl1/(1+negfuz*abs(spl1)) * partial);   // Style-B
              mojo_dc_off == 1 ? 
               (        
               otm2=0.999*otm2 + spl1 - itm2; itm2=spl1; spl1=otm2;
               );              ); 
            ) : (
            recto == 7 ? // SHAPEABLE-C
            (
            spl0 < 0 ? 
              (
              spl0 = min(max(spl0,-1),1);
              spl0 = (1+posfuz)*spl0/(1+posfuz*abs(spl0));
              ) : (
              spl0 = min(max(spl0,-1),1);
              spl0 = (1-neg) * (1+negfuz)*spl0/(1+negfuz*abs(spl0));  // Style-C
              mojo_dc_off == 1 ? 
              (
              otm1=0.999*otm1 + spl0 - itm1; itm1=spl0; spl0=otm1;
              );;
              );
            
            spl1 < 0 ? 
              (
              spl1 = min(max(spl1,-1),1);
              spl1 = (1+posfuz)*spl1/(1+posfuz*abs(spl1));
              ) : (
              spl1 = min(max(spl1,-1),1);
              spl1 = (1-neg) * (1+negfuz)*spl1/(1+negfuz*abs(spl1));  // Style-C           
              mojo_dc_off == 1 ? 
                (        
                otm2=0.999*otm2 + spl1 - itm2; itm2=spl1; spl1=otm2;
                );;
              ); 
            ) : (
            recto == 8 ? // SHAPEABLE-D
              (
              spl0 < 0 ? 
                (
                spl0 = min(max(spl0,-1),1);
                //spl0 = abs((1+negfuz)*spl0/(1+negfuz*abs(spl0))) * partial; // Style-A
                spl0 = 1* partial - ((1+negfuz)*spl0/(1+negfuz*abs(spl0)) * partial); // Style-B
                //spl0 = abs(spl0) * partial; spl0 = (1+negfuz)*spl0/(1+negfuz*abs(spl0));
                mojo_dc_off == 1 ? 
                  (
                  otm1=0.999*otm1 + spl0 - itm1; itm1=spl0; spl0=otm1;
                  );
                 ) : (
                 spl0 = min(max(spl0,-1),1);
                 spl0 = (1+posfuz)*spl0/(1+posfuz*abs(spl0));
                 
                );
               
               
                            
            
              spl1 < 0 ? 
                (
                spl1 = min(max(spl1,-1),1);
                spl1 = abs((1+negfuz)*spl1/(1+negfuz*abs(spl1))) * partial;  // Style-A 
                //spl1 = 1 - ((1+negfuz)*spl1/(1+negfuz*abs(spl1)) * partial);   // Style-B
                //spl1 = abs(spl1) * partial; spl1 = (1+negfuz)*spl1/(1+negfuz*abs(spl1));       
               mojo_dc_off == 1 ? 
               (        
               otm2=0.999*otm2 + spl1 - itm2; itm2=spl1; spl1=otm2;
               );;
                );
              spl1 = min(max(spl1,-1),1);
              spl1 = (1+posfuz)*spl1/(1+posfuz*abs(spl1));
              
              
              );
              
            
            );
            
            
            );
          );
        );        
      );
    );
  );

//|||||||||||||||||||||||||||||DC OFFSET REMOVAL|||||||||||||||||||||||||||||    
dc_offset_removal == 1 ?
  (   
  otm1=0.999*otm1 + spl0 - itm1; itm1=spl0; spl0=otm1;
  otm2=0.999*otm2 + spl1 - itm2; itm2=spl1; spl1=otm2;   
  );
  
//|||||||||||||||||||||||||||||OUTPUT FILTER|||||||||||||||||||||||||||||

//|||||||||||||||||||||||||||||MIX||||||||||||||||||||||||||||| 

spl0 = spl0dry * dry + spl0 * wet;
spl1 = spl1dry * dry + spl1 * wet;


/*******************************************************************************
*  2015 Greg Z. - I have no idea what I'm doing                                *
*  REMEMBER TO CREDIT PROPERLY                                                 *
*   REMEMBER TO CREDIT PROPERLY                                                *
*    REMEMBER TO CREDIT PROPERLY                                               *
*     REMEMBER TO CREDIT PROPERLY                                              *
*      REMEMBER TO CREDIT PROPERLY                                             *
*       REMEMBER TO CREDIT PROPERLY                                            *
*        REMEMBER TO CREDIT PROPERLY                                           *
*         REMEMBER TO CREDIT PROPERLY                                          *
*          REMEMBER TO CREDIT PROPERLY                                         *
*           REMEMBER TO CREDIT PROPERLY                                        *
*******************************************************************************/

desc:modTanH - tolerance and jitter on asymmetry


slider8:100<0,100,1>Stereo Width
slider9:200<5,20000,1>Jitter Smoothness Cutoff (Hz)
slider10:1<0,200,1>Jitteriness Coarse
slider11:1<0.01,1,0.01>Jitteriness
slider12:5<0,500,1>Tolerance (%)


slider20:1<0,100,1>Drive
slider21:1<0,20,0.01>Asymmetry coef_a
slider22:1<0,20,0.01>Asymmetry coef_b

import z/z-MemoryManager.jsfx-inc
import z/z-TransferCurves.jsfx-inc

@init
rc = 1 / (2 * $pi * slider9); // rc filter Smoothing coefficient
// Convert attack/decay/release time to RC time constant
// rc_set(0.2 * t);
rc_a = 1 / (rc * srate + 1);

// Low-pass

function rc_lp(s, a)
  instance(lp)
(
  lp += a * (s - lp);
);

@slider

transfer_modtanh_drive = slider20;
transfer_modtanh_coef_a = slider21;
transfer_modtanh_coef_b = slider22;


stereo_width = slider8 / 100;

rc = 1 / (2 * $pi * slider9); // rc filter Smoothing coefficient
rc_a = 1 / (rc * srate + 1);
tolerance_l = slider12 / 100;
tolerance_r = slider12 / 100;
jitter = slider10 + slider11;

@block


@sample

//TOLERANCE ACCUMULATOR
tolerance_l = max(0, min(slider12, (tolerance_l + ((rand(2) - 1) * jitter) )));
tolerance_l = l.rc_lp(tolerance_l, rc_a);

//TOLERANCE ACCUMULATOR - another one for stereo mode
tolerance_r = max(0, min(slider12, (tolerance_r + ((rand(2) - 1) * jitter) )));
tolerance_r = r.rc_lp(tolerance_r, rc_a);


transfer_modtanh_drive > 0 ?
  (
  /*
  transfer_tanh_drive = slider20 * (1 + (tolerance_l / 100));
  spl0 = tanh(spl0, transfer_tanh_drive);
  transfer_tanh_drive = (transfer_tanh_drive * (1 - stereo_width)) + ((slider20 * (1 + (tolerance_r / 100))) * stereo_width); //mix for stereo width
  spl1 = tanh(spl1, transfer_tanh_drive);
  */
  
  transfer_modtanh_coef_a = slider21 * (1 + (tolerance_l / 100));
  transfer_modtanh_coef_b = slider22 * (1 + (tolerance_r / 100));
  spl0 = modTanH(spl0, transfer_modtanh_drive, transfer_modtanh_coef_a, transfer_modtanh_coef_b);
  
  transfer_modtanh_coef_a = (transfer_modtanh_coef_a  * (1 - stereo_width)) + ((slider21 * (1 + (tolerance_r / 100))) * stereo_width); //mix for stereo width
  transfer_modtanh_coef_b = (transfer_modtanh_coef_b  * (1 - stereo_width)) + ((slider22 * (1 + (tolerance_l / 100))) * stereo_width); //mix for stereo width
  spl1 = modTanH(spl1, transfer_modtanh_drive, transfer_modtanh_coef_a, transfer_modtanh_coef_b);
  
  );


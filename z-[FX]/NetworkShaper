/*******************************************************************************
*  2015 Greg Z. - I have no idea what I'm doing                                *
*  REMEMBER TO CREDIT PROPERLY                                                 *
*   REMEMBER TO CREDIT PROPERLY                                                *
*    REMEMBER TO CREDIT PROPERLY                                               *
*     REMEMBER TO CREDIT PROPERLY                                              *
*      REMEMBER TO CREDIT PROPERLY                                             *
*       REMEMBER TO CREDIT PROPERLY                                            *
*        REMEMBER TO CREDIT PROPERLY                                           *
*         REMEMBER TO CREDIT PROPERLY                                          *
*          REMEMBER TO CREDIT PROPERLY                                         *
*           REMEMBER TO CREDIT PROPERLY                                        *
*******************************************************************************/

desc: Multiband Pre/De-Emphasis Network wrapped around Parametric PieceWise Transfer Curve

/* TODO []
*/

//3-Band Splitter
slider1:0<0,1,0{Band Splitter ####################}>########################################
slider2:200<0,22000,1>Low crossover (Hz)
slider3:2000<0,22000,1>High crossover (Hz)

//Pre/De-Emphasis Networks (1 per band)
slider8:0<0,1,0{Emphasis Network #################}>########################################
//Band() is a OOFunction that store parameters and update sliders according to the currently selected Band
slider9:0<0,3,1{Low,Mid,High}>Band Select

slider10:100<0,100,1>Drive(gain) (dB)
slider11:100<0,100,1>Low Shelf (dB)
slider12:100<0,100,1>Band 1 Frequency (Hz)
slider13:100<0,100,1>Band 1 Gain (dB)
slider14:100<0,100,1>Band 1 Q
slider15:100<0,100,1>Band 2 Frequency (Hz)
slider16:100<0,100,1>Band 2 Gain (dB)
slider17:100<0,100,1>Band 2 Q
slider18:100<0,100,1>Band 3 Frequency (Hz)
slider19:100<0,100,1>Band 3 Gain (dB)
slider20:100<0,100,1>Band 3 Q
slider21:100<0,100,1>Hi Shelf (dB)
slider22:100<0,100,1>DC Offset

//Parametric PieceWise Transfer Curve (1 per band)
slider30:0<0,1,0{Transfer Lab ####################}>########################################
slider31:0<0,4,0{Populate,list,with,z-TransferCurves,functions}>Pos Top Function Select
slider32:100<0,100,1>Threshold (dB)
slider33:0<0,4,0{Populate,list,with,z-TransferCurves,functions}>Pos Mid Function Select
slider34:100<0,100,1>Threshold (dB)
slider35:0<0,4,0{Populate,list,with,z-TransferCurves,functions}>Pos Bottom Function Select
slider36:100<0,100,1>Pos Damping | Global or as a selectable function ?
slider37:10<1,100,1>Pos Hysteresis Resolution
slider38:100<0,100,1>Pos Hysteresis On
slider39:0<0,100,1>Pos Hysteresis Off

slider40:0<0,4,0{Populate,list,with,z-TransferCurves,functions}>Neg Top Function Select
slider41:100<0,100,1>Threshold (dB)
slider42:0<0,4,0{Populate,list,with,z-TransferCurves,functions}>Neg Mid Function Select
slider43:100<0,100,1>Threshold (dB)
slider44:0<0,4,0{Populate,list,with,z-TransferCurves,functions}>Neg Bottom Function Select
slider45:10<1,100,1>Neg Damping
slider46:100<1,100,1>Neg Hysteresis Resolution
slider47:0<0,100,1>Neg Hysteresis Amount



//3-Band Joiner
slider50:0<0,1,0{Band Joiner ####################}>########################################
slider51:0<-24,24,.1>Low band mix (dB).[Band Join]
slider52:0<-24,24,.1>Mid band mix (dB).[Band Join]
slider53:0<-24,24,.1>High band mix (dB).[Band Join]

//Output Stage
slider54:0<0,1,0{Output Stage ####################}>########################################
slider55:0<0,4,0{Populate,list,with,z-Filters,functions}>Output Filter Select
slider56:100<0,100,0.05>Frequency | Cutoff (Scale)
slider57:100<0,100,0.05>Gain | Q (Scale)

slider58:0<0,1,1{On,Off}>Limiter

slider59:0<-100,100,0.05>Phase Shift

slider63:-96<-96,6,0.1>DRY (dB)
slider64:0<-96,6,0.1>WET (dB)

slider61:0<0,9,1>first digit


//IMPORT CRITICAL STUFF FIRST - IF THERE IS A CONFLICT IMPORT FROM INSIDE THE LIBRARY ?


import z/z-MemoryManager.jsfx-inc
import z/z-ListManager.jsfx-inc
import z/z-MathFunctions.jsfx-inc
//import z/z-IntegralOperators.jsfx-inc
//import z/z-DifferentialOperators.jsfx-inc
//import z/z-OtherOperators.jsfx-inc
import z/z-Matrices.jsfx-inc
import z/z-StochasticProcesses.jsfx-inc
import z/z-Utilities.jsfx-inc
import z/z-Windows.jsfx-inc
import z/z-Analysis.jsfx-inc
import z/z-Graph.jsfx-inc
import z/z-Hysteresis.jsfx-inc
import z/z-TransferCurves.jsfx-inc
import z/z-Filters.jsfx-inc
import z/z-NoiseGenerators.jsfx-inc
import z/z-Oscillators.jsfx-inc
import z/z-Resonators.jsfx-inc
import z/z-Midi.jsfx-inc
import z/z-DynamicProcessors.jsfx-inc

//OBSERVER, ANALYSER, INTEGRER, RESTITUER
//import cookdsp_0.2_2015-05-12/cookdsp.jsfx-inc
//import tale/adsr.jsfx-inc
//import tale/array.jsfx-inc 
//import tale/lfo.jsfx-inc 
//import tale/malloc.jsfx-inc 
//import tale/midi_queue.jsfx-inc 
//import tale/noise_generator.jsfx-inc 
//import tale/oversampler.jsfx-inc 
//import tale/poly_blep.jsfx-inc
//import tale/rbj_filter.jsfx-inc
//import tale/rc_filter.jsfx-inc
//import tale/sine_oscillator.jsfx-inc
//import tale/zdf_filter.jsfx-inc



@init

/* TODO
http://ajaxsoundstudio.com/cookdspdoc/cookdsp/effects.jsfx-inc
http://ajaxsoundstudio.com/cookdspdoc/scale.html
http://ajaxsoundstudio.com/cookdspdoc/cookdsp/filters.jsfx-inc
http://www.embedded.com/design/configurable-systems/4025591/Digital-filtering-without-the-pain
https://en.wikipedia.org/wiki/Inverse_trigonometric_functions
https://en.wikipedia.org/wiki/Diode
http://aries.ucsd.edu/NAJMABADI/CLASS/ECE65/12-W/Slides/ECE65_W12-Diode-2.pdf

*/

//Init MemoryManager
memInit(100);

/*
function transferCurve(drive, cutoff)
  (
  //init
  this.nyquist_f = srate * 0.49;
  this.drive = max(0, min(1, drive));
  this.cutoff = max(20, min(this.nyquist_f, cutoff));
  
  /*
  this.ny = srate * 0.49;
  drive < 0 ? drive = 0 : drive > 1 ? drive = 1;
  this.drive = drive;
  this.d = (1.0 - this.drive) * 0.3999;
  cutoff < 20 ? cutoff = 20 : cutoff > this.ny ? cutoff = this.ny; 
  this.cutoff = cutoff;
  this.c = exp(-2 * $pi * this.cutoff / srate);
  this.y1 = this.y2 = 0.0; 
  );
  
spl_L.transferCurve(slider20, slider21);
spl_R.transferCurve(slider20, slider21);
*/


  


@slider
memWipe(); // wipe ptr_map alloc + reset memory heap region to 0 

@sample

/*
//SINE - 1 -
Wave_Sine = sin(Pos + Shift_Sine); 



// SQUARE - 1 - Sign From Sine Wave
Wave_Square = sin(Pos + Shift_Square);
Wave_Square = sign(Wave_Square);


//TRIANGLE - 4 - f(x)=arcsin(sin x) <<<<<=== REPLACE W asin(x)/pi*2
Wave_Triangle = sin(Pos + Shift_Triangle); //Start with Sine | Catch Audio Input
//Wave_Triangle_Dry = Wave_Triangle; //Store
Wave_Triangle = asin(Wave_Triangle) / $pi *2; //Boom Tri-an-guuuuule
//Wave_Triangle = Wave_Triangle * Blend_Triangle + Wave_Triangle_Dry * (1 - Blend_Triangle); //Linear Weighted Blend 


//MIX 
Wave = (Wave_Sine * Mix_Sine + Wave_Square * Mix_Square + Wave_Triangle * Mix_Triangle) ; //  / ( Mix_Sine + Mix_Square + Mix_Triangle )
Wave *= Vol;

spl0 += Wave;
spl1 += Wave;


//GLOBAL POS

Pos = Pos + Freq;
(Pos >= 2.0 * $pi) ? Pos -= 2.0 * $pi;



spl0 *= gain_input;
spl1 *= gain_input;

//DC OFFSET -> DUTY CYCLE MODULATION
spl0 += dc_offset;
spl1 += dc_offset;


//spl0 += spl_0.damelsDistort(spl0);
//spl0 = cosArcsin(spl0, 2 ^ (slider56 / 6));
//spl0 = cos(asin(spl0));
spl1 = spl0;

spl0 = hardClip(spl0, minimum, maximum);

//TRANSFER CURVES - Arcsin - Triangle Distortion -  Blend
 
transfer_triangle_spl0 = asin(spl0) / $pi *2; //Boom Tri-an-guuuuule
spl0 = transfer_triangle_spl0 * transfer_triangle_drive + spl0 * (1 - transfer_triangle_drive); 

transfer_triangle_spl1 = asin(spl1 / $pi *2); //Boom Tri-an-guuuuule
spl1 = transfer_triangle_spl1 * transfer_triangle_drive + spl1 * (1 - transfer_triangle_drive);
 

//TRANSFER CURVES - Sign - Square Distortion -  Blend
transfer_square_spl0 = sign(spl0); //Boom Square
spl0 = transfer_square_spl0 * transfer_square_drive + spl0 * (1 - transfer_square_drive);

transfer_square_spl1 = sign(spl1); //Boom Square
spl1 = transfer_square_spl1 * transfer_square_drive + spl1 * (1 - transfer_square_drive); 

//TRANSFER CURVES - (pos)Half-Wave Rectifier 
transfer_poshalfwave_spl0 = (spl0 + abs(spl0)) / 2;
spl1 = spl0 = transfer_poshalfwave_spl0 * transfer_poshalfwave_drive + spl0 * (1 - transfer_poshalfwave_drive);

//TRANSFER CURVES - (neg)Half-Wave Rectifier 
transfer_neghalfwave_spl0 = (spl0 - abs(spl0)) / 2;
spl1 = spl0 = transfer_neghalfwave_spl0 * transfer_neghalfwave_drive + spl0 * (1 - transfer_neghalfwave_drive);


//TRANSFER CURVES - (x + )      ... x ^ a
//spl1 = spl0 = spl0 ^ transfer_xpow;
//spl1 = spl0 = spl0 + (sign(spl0) * spl0 ^ transfer_xpow);

//arctan
//sgn(x)(1-exp(-|x|))
// tanh

// (1+posfuz)*spl0/(1+posfuz*abs(spl0));


//Output Gain 
spl0 *= gain_output;
spl1 *= gain_output;
*/

  
@gfx 500 500

fillScreen(.4,.2,.15);


gfx_x = 0; gfx_y = 490; setColor(1,.3,0);
gfx_drawstr("Waves&Meters");gfx_drawstr(" ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");

drawAxes(0,0.5,1);

memDiagnostic(30,40);

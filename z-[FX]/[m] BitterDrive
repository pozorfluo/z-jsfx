/*******************************************************************************
*  2015 Greg Z. - I have no idea what I'm doing                                *
*  REMEMBER TO CREDIT PROPERLY                                                 *
*   REMEMBER TO CREDIT PROPERLY                                                *
*    REMEMBER TO CREDIT PROPERLY                                               *
*     REMEMBER TO CREDIT PROPERLY                                              *
*      REMEMBER TO CREDIT PROPERLY                                             *
*       REMEMBER TO CREDIT PROPERLY                                            *
*        REMEMBER TO CREDIT PROPERLY                                           *
*         REMEMBER TO CREDIT PROPERLY                                          *
*          REMEMBER TO CREDIT PROPERLY                                         *
*           REMEMBER TO CREDIT PROPERLY                                        *
*******************************************************************************/


//http://www.bearfootfx.com/amp-effects/
//http://www.bearfootfx.com/amp-effects/
//http://www.bearfootfx.com/amp-effects/
//http://www.bearfootfx.com/amp-effects/
//http://www.bearfootfx.com/amp-effects/
//http://www.bearfootfx.com/amp-effects/
//http://www.bearfootfx.com/amp-effects/

desc: MONO BitterDrive

slider1:0<0,36,1>Input Gain (db)

//Pre-Drive Filters
slider5:20000<5,20000,1>LP (Hz)
slider6:0<0,500,1>HP (Hz)

//Bias + Pre|Post stillGain trial run
slider10:0<0,9.99,0.001>stillGain
slider11:0<0,0.3,0.001>Bias (V)
slider12:0<0,9.99,0.001>stillGain 

//Tanh
slider25:0<0,99,1>vosTanH
slider34:0<0,99,1>fastSigmoid
slider35:0<0,100,1>stillLoud
slider36:0<0,99,1>stillReaLoud


slider40:1<1,6,1>Stages

slider51:0<-100,100,1>Feedback Coarse
slider52:0<-1,1,0.00001>Feedback Fine
slider53:10<1,100,1>Feedback Depth

slider54:0<-24,24,1>Pre-Limiter Output Gain (db)
slider55:1<0,4,1{tanH,vosTanH,fastSigmoid,stillLoud,stillReaLoud}>Soft-Clipping Limiter Function

slider64:0<0,1,1{Passthrough Stereo,Force Mono}>x



import z/z-MemoryManager.jsfx-inc
import z/z-TransferCurves.jsfx-inc
import z/z-Filters.jsfx-inc

@init
ext_noinit = 1;
//Init MemoryManager
memInit(100);


memWipe();
feedback_depth = slider53;
spl_0.feedback = memAlloc(100, "feedback spl0");




// Low-pass

function rc_lp(s, a)
  instance(lp)
(
  lp += a * (s - lp);
);

// High-pass

function rc_hp(s, a)
(
  s - this.rc_lp(s, a);
);



//|||||||||||||||||||||||||||||DC OFFSET REMOVAL|||||||||||||||||||||||||||||
itm1 = otm1 = 0;

@slider
gain_input = exp(slider1 * 0.11552453);
gain_output = exp(slider54 * 0.11552453);

bias = slider11;

feedback_depth = slider53;


rc_predrive_lp = 1 / (2 * $pi * slider5); // rc filter Smoothing coefficient
rc_a_predrive_lp = 1 / (rc_predrive_lp * srate + 1);

rc_predrive_hp = 1 / (2 * $pi * slider6); // rc filter Smoothing coefficient
rc_a_predrive_hp = 1 / (rc_predrive_hp * srate + 1);


drive_stillGainPreBias           = 1 / ((100 - slider10) / 100); //Leave it like this -> non-linear, 50 yelds 2, max yelds 100 w sliderXX:0<0,99,1>
drive_stillGainPostBias          = 1 / ((100 - slider12) / 100);

drive_vosTanH                    = 1 / ((100 - slider25) / 100);
drive_fastSigmoid                = 1 / ((100 - slider34) / 100);
drive_stillLoud                  = slider35 / 100; // 1 / ((100 - slider35) / 100);
drive_stillReaLoud               = 1 / ((100 - slider36) / 100);

stages = slider40;


mix_feedback = (slider51 + slider52) / 100;
is_feedback_on = abs(mix_feedback);

limiter_function = slider55;
force_mono = slider64;

/* 
debug_drive = drive_stillLoud;
debug_drive_1 = 1 / (1 - (debug_drive / 2));
debug_drive_2 = debug_drive / 2;
*/

@block


@sample
//|||||||||||||||||||||||||||||FEEDBACK|||||||||||||||||||||||||||||
is_feedback_on ?
  (
  f = 0;
  moop = ceil(spl0 * feedback_depth);
  
  loop(moop,
    //spl0
    index = spl_0.feedback_index - f;
    
    index < 0 ?
      (
      index = feedback_depth - index;    
      );
    
    spl0 += spl_0.feedback[index] * mix_feedback;
    spl0 /= 1 + abs(mix_feedback);
        
    f +=1;
    );
  );  
spl_0.feedback_index += 1;

current_stage = 1;

loop(stages,
//|||||||||||||||||||||||||||||INPUT GAIN||||||||||||||||||||||||||||
spl0 *= gain_input;

spl0_dry = spl0;

slider10 ? spl0 = stillGain(spl0, drive_stillGainPreBias);

//|||||||||||||||||||||||||||||BIAS|||||||||||||||||||||||||||||
spl0 += bias;

slider12 ? spl0 = stillGain(spl0, drive_stillGainPostBias);


//|||||||||||||||||||||||||||||DRIVE|||||||||||||||||||||||||||||
slider25 ? spl0 = vosTanH(spl0 * drive_vosTanH);
slider34 ? spl0 = fastSigmoid(spl0 * drive_fastSigmoid);
slider35 ? spl0 = stillLoud(spl0, drive_stillLoud);
slider36 ? spl0 = stillReaLoud(spl0 * drive_stillReaLoud);


//|||||||||||||||||||||||||||||STAGE FILTERS|||||||||||||||||||||||||||||
slider6 ?
  (
  
current_stage == 1 ?  ( spl0 = spl0_predrive_lp_s1.rc_lp(spl0, rc_a_predrive_lp);
                        spl0 = spl0_predrive_hp_s1.rc_hp(spl0, rc_a_predrive_hp);
  ):(
current_stage == 2 ?  ( spl0 = spl0_predrive_lp_s2.rc_lp(spl0, rc_a_predrive_lp);
                        spl0 = spl0_predrive_hp_s2.rc_hp(spl0, rc_a_predrive_hp);
  ):(
current_stage == 3 ?  ( spl0 = spl0_predrive_lp_s3.rc_lp(spl0, rc_a_predrive_lp);
                        spl0 = spl0_predrive_hp_s3.rc_hp(spl0, rc_a_predrive_hp);
  ):(
current_stage == 4 ?  ( spl0 = spl0_predrive_lp_s4.rc_lp(spl0, rc_a_predrive_lp);
                        spl0 = spl0_predrive_hp_s4.rc_hp(spl0, rc_a_predrive_hp);
  ):(
current_stage == 5 ?  ( spl0 = spl0_predrive_lp_s5.rc_lp(spl0, rc_a_predrive_lp);
                        spl0 = spl0_predrive_hp_s5.rc_hp(spl0, rc_a_predrive_hp);
  ):(
                        spl0 = spl0_predrive_lp_s6.rc_lp(spl0, rc_a_predrive_lp);
                        spl0 = spl0_predrive_hp_s6.rc_hp(spl0, rc_a_predrive_hp);
  );););););

  ):(

current_stage == 1 ?  ( spl0 = spl0_predrive_lp_s1.rc_lp(spl0, rc_a_predrive_lp);
  ):(
current_stage == 2 ?  ( spl0 = spl0_predrive_lp_s2.rc_lp(spl0, rc_a_predrive_lp);
  ):(
current_stage == 3 ?  ( spl0 = spl0_predrive_lp_s3.rc_lp(spl0, rc_a_predrive_lp);
  ):(
current_stage == 4 ?  ( spl0 = spl0_predrive_lp_s4.rc_lp(spl0, rc_a_predrive_lp);
  ):(
current_stage == 5 ?  ( spl0 = spl0_predrive_lp_s5.rc_lp(spl0, rc_a_predrive_lp);
  ):(
                        spl0 = spl0_predrive_lp_s6.rc_lp(spl0, rc_a_predrive_lp);
  );););););  
  
  );
current_stage += 1;
);
//|||||||||||||||||||||||||||||FEEDBACK||||||||||||||||||||||||||||
spl_0.feedback_index >= feedback_depth ? spl_0.feedback_index = 0; //wrap around
spl_0.feedback[spl_0.feedback_index] = spl0;

//|||||||||||||||||||||||||||||OUTPUT GAIN||||||||||||||||||||||||||||
spl0 *= gain_output;

//|||||||||||||||||||||||||||||SOFT LIMITER||||||||||||||||||||||||||||
limiter_function == 0 ?  (  spl0 = tanH(spl0);
  ):(
limiter_function == 1 ?  (  spl0 = vosTanH(spl0); // GOES WILD IF spl0 is TOO HIGH
  ):(
limiter_function == 2 ?  (  spl0 = fastSigmoid(spl0);
  ):(
limiter_function == 3 ?  (  spl0 = stillLoud(spl0, 1);
  ):(
                            spl0 = stillReaLoud(spl0);
  ););););
//|||||||||||||||||||||||||||||DC OFFSET REMOVAL||||||||||||||||||||||||||||| 
otm1 = 0.999 * otm1 + spl0 - itm1; itm1 = spl0; spl0 = otm1;
//|||||||||||||||||||||||||||||PASSTHROUGH STEREO|||||||||||||||||||||||||||||
force_mono ? spl1 = spl0;
/****************************GFX********************************
****************************************************************/
/*
//@gfx 500 500

fillScreen(0.15, 0.04, 0.03);


setColor(0.5, 0.1, 0);
memDiagnostic(30, 40);

//Draw Baseline
setColor(1, 0.1, 0.1);
gfx_x = 0; gfx_y = gfx_h / 2;
gfx_lineto(gfx_w , gfx_y, 0);

//INPUT
setColor(1, 0.3, 0.1);
gfx_x = 0; gfx_y = gfx_h / 2;
x_step_size = gfx_w / feedback_depth; 
k = 0;

loop(feedback_depth,
  index = spl_0.feedback_index + k;
  
  index > feedback_depth ?
    (
    index -= feedback_depth;    
    );
  gfx_lineto(x_step_size * k , gfx_h / 2 + (gfx_h - 20) / 2 * spl_0.feedback[index], 0);
  k +=1;
  );
*/
///////////////////////////DUMP



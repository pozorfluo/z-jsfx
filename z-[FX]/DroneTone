// This effect Copyright (C) 2004 and later Cockos Incorporated
// License: GPL - http://www.gnu.org/licenses/gpl.html
desc: Drone Tone - for modwheel stuff map knob or use TWIN
slider1:0<-120,6,1>wet mix (dB)
slider2:-6<-120,6,1>dry mix (dB)

slider3:440<0.1,24000,1>base frequency (Hz)
slider4:0<0,3,1{toggle, gate}>mode
slider5:0<-4,4,1>octave shift

slider10:0<0,1,0.0001>Drift Coarse 0.33 0.66 1
slider11:0<0,1,0.0001>Drift Medium
slider12:0<0,1,0.0001>Drift Fine 

slider15:0<0,0,0{OFF,ON}>TODO - SYNC TO HOST TEMPO 
slider16:0<0,0,0{OFF,ON}>TODO - ADD LP FILTER ON FREQ CHANGE -> PORTAMENTO

slider20:0<0,2,1{sine,triangle,saw}>shape

import z/z-Midi.jsfx-inc

@init
  min_freq = 2.0 * $pi * 0.1 / srate;
  max_freq = 2.0 * $pi * 22000 / srate;
  toggle = 0;

@slider
  vol = 2 ^ (slider1 / 6); 
  dry = 2 ^ (slider2 / 6); 
  adj = 2.0 * $pi * slider3 * (2 ^ (slider5 / 12)) / srate;
  
  drift = slider10 / 2 + slider11 / 10 + slider12 / 100;
  
  
  osc1_freq = adj + adj * drift;  
  osc2_freq = adj - adj * drift;
  
  osc1_freq = max(min_freq, min(max_freq, osc1_freq));
  osc2_freq = max(min_freq, min(max_freq, osc2_freq));

@block

//from cookdsp
while (midirecv(offset, msg1, msg2, msg3)) 
  (
  // get noteons and noteoffs from all channels
  (msg1 & $xF0) == $x90 || (msg1 & $xF0) == $x80 ? 
    (
    msg3 != 0 ? 
      (
      // noteon 
      msg2 == midinote ? toggle ~= 1;
      midinote = msg2;
      // convert midi note to frequency in Hz
      slider3 = midiToFrequency(midinote);
      sliderchange(slider3);
      adj = 2.0 * $pi * slider3 * (2 ^ (slider5 / 12)) / srate;
      osc1_freq = adj + adj * drift;  
      osc2_freq = adj - adj * drift;
      osc1_freq = max(min_freq, min(max_freq, osc1_freq));
      osc2_freq = max(min_freq, min(max_freq, osc2_freq));  
      // scales velocity to amplitude
      midi_amp = msg3 / 127;
      ) : (
      // noteoff (only with current pitch)
      msg2 == midinote ? midi_amp = 0;
      );
    ):(
    // passthrough other events
    midisend(offset, msg1, msg2, msg3);
    );
  );  

@sample
slider4 == 0 && toggle ? midi_amp = 1;

midi_amp ?
  (
  (slider20 < 0.67) ? //SINE
    ( 
    osc1 = cos(pos1);
    osc2 = cos(pos2);  
    ) : (
  (slider20 < 1.33) ?  //TRIANGLE
    (
    osc1 = 2.0 * pos1 / $pi - 1.0;
    (osc1 > 1.0) ? osc1 = 2.0 - osc1;
    
    osc2 = 2.0 * pos2 / $pi - 1.0;
    (osc2 > 1.0) ? osc2 = 2.0 - osc2;
    
    ) : (               //SAW
    osc1 = 1.0 - pos1 / $pi;
    osc2 = 1.0 - pos2 / $pi;  
    ););
  
  osc1 *= vol / 2 * midi_amp;
  osc2 *= vol / 2 * midi_amp;
  spl0 = osc1 + osc2 + spl0 * dry;
  spl1 = osc1 + osc2 + spl1 * dry;
  ):(
  spl0 *= dry;
  spl1 *= dry;  
  );


//phasors
pos1 = pos1 + osc1_freq;
(pos1 >= 2.0 * $pi) ? pos1 -= 2.0 * $pi;

pos2 = pos2 + osc2_freq;
(pos2 >= 2.0 * $pi) ? pos2 -= 2.0 * $pi;

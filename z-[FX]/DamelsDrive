/*******************************************************************************
*  2017 Greg Z. - I have no idea what I'm doing                                *
*  REMEMBER TO CREDIT PROPERLY                                                 *
*   REMEMBER TO CREDIT PROPERLY                                                *
*    REMEMBER TO CREDIT PROPERLY                                               *
*     REMEMBER TO CREDIT PROPERLY                                              *
*      REMEMBER TO CREDIT PROPERLY                                             *
*       REMEMBER TO CREDIT PROPERLY                                            *
*        REMEMBER TO CREDIT PROPERLY                                           *
*         REMEMBER TO CREDIT PROPERLY                                          *
*          REMEMBER TO CREDIT PROPERLY                                         *
*           REMEMBER TO CREDIT PROPERLY                                        *
*******************************************************************************/

desc: DamelsDrive - Todo : Negative Coeff + Serialize + Oversample + Must Clip Below 1

//slider1:0<0,36,1>Input Gain (db)

slider2:10<1,50,1>Highest Harmonic Order

slider9:1<0.01,20,0.01>LFO (Hz)
//slider64:1<0,1,1{Passthrough Stereo,Force Mono}>x



import z/z-MemoryManager.jsfx-inc
import z/z-Strings.jsfx-inc
import z/z-TransferCurves.jsfx-inc
import z/z-Utilities.jsfx-inc
import z/z-MathFunctions.jsfx-inc
import z/z-Graph.jsfx-inc
import z/z-Strings.jsfx-inc
import z/z-Oscillators.jsfx-inc

/* TODO
http://ajaxsoundstudio.com/cookdspdoc/cookdsp/effects.jsfx-inc
http://ajaxsoundstudio.com/cookdspdoc/scale.html
http://ajaxsoundstudio.com/cookdspdoc/cookdsp/filters.jsfx-inc
http://www.embedded.com/design/configurable-systems/4025591/Digital-filtering-without-the-pain
https://en.wikipedia.org/wiki/Inverse_trigonometric_functions
https://en.wikipedia.org/wiki/Diode
http://aries.ucsd.edu/NAJMABADI/CLASS/ECE65/12-W/Slides/ECE65_W12-Diode-2.pdf

+Replace Blend by a choice of transfer function or remap w pow

+Add parametric Pre/De-Emphasis network
+Add SlewRate
+Add Damping
+disconnect 'drive' from the transfer curve, treat it as a pre/de gain to hit the transfer curve higher/lower ??

*/
@init
/*******************************************************************
  windowInit     
  --------
*******************************************************************/
function windowInit(id_offset)
  (
  this.id_offset                  = id_offset;
  
  this.gfx_w  = gfx_w;
  this.gfx_h  = gfx_h;    
  this.width  = (gfx_w - 200) | 0;
  this.height = (gfx_h - gfx_y) | 0;
  
  
  this.buttons.y_start            = gfx_y;
  this.buttons.x_start            = gfx_x;
  this.buttons.height             = (this.height / 2) | 0;
  this.buttons.top_count          = _BUTTONS_TOP_COUNT;
  this.buttons.bottom_count       = _BUTTONS_BOTTOM_COUNT;
  this.buttons.top_width          = roundUp(this.width / this.buttons.top_count);
  this.buttons.bottom_width       = roundUp(this.width / this.buttons.bottom_count);
  //save on some calculations in gfx refresh
  this.buttons.height_half        = roundUp(this.buttons.height / 2);
  this.buttons.height_third       = roundUp(this.buttons.height / 3);
  this.buttons.top_width_half     = roundUp(this.buttons.top_width / 2);
  this.buttons.bottom_width_half  = roundUp(this.buttons.bottom_width / 2);
  this.buttons.top_width_third    = roundUp(this.buttons.top_width / 3);
  this.buttons.bottom_width_third = roundUp(this.buttons.bottom_width / 3);
  
  this.stateInit();
  this._REFRESH_GFX = this.stateAlloc();
  this._BUFFER_MAP  = this.stateAlloc();
  

  this.font.name = "HaxrCorp S8";
  this.font.size = 8; //HaxrCorp is 8 only 
  
  //gfx_setfont(1, font.name, font.size + 5);
  gfx_setfont(1, thisfont.name, thisfont.size);

    
  this.stateOn(display._REFRESH_GFX); //flag for GUI refresh
  
  );
ext_noinit = 1;


//MemoryManager
memInit(100);


// BUTTONS NAMES
#button_1  = "L->R";
#button_2  = "L<-R";
#button_3  = "rand L";
#button_4  = "rand R";
#button_5  = "rand.1 L";
#button_6  = "rand.1 R";

window.buttons.name = memAlloc(32, "window.buttons.name"); 

window.buttons.name[0] = #button_1;
window.buttons.name[1] = #button_2;
window.buttons.name[2] = #button_3;
window.buttons.name[3] = #button_4;
window.buttons.name[4] = #button_5;
window.buttons.name[5] = #button_6;

itm1=itm2=otm1=otm2=0;

@slider
memWipe(); // DUH DON'T YOU EVER FORGET THAT AGAIN
//gain_input = exp(slider1 * 0.11552453);


// 1.ADD LFO TO SEED SELECTION 2. PROFIT !
//spl_0.damelsDistort_init(slider11, exp(slider12 * 0.11552453), exp(slider13 * 0.11552453), slider14, slider15, strcpy_fromslider(#, slider20));// 2 ^ (slider18 / 6), 2 ^ (slider19 / 6));

spl_0.damelsDistort_init(slider2);
spl_0.lfo.frequency_cw = 2 * $pi * (slider9) / srate;

spl_1.damelsDistort_init(slider2);
spl_1.lfo.frequency_cw = 2 * $pi * (slider9) / srate;



@sample

//|||||||||||||||||||||||||||||INPUT GAIN||||||||||||||||||||||||||||
//spl0 *= gain_input;

//spl0_dry = spl0;

//|||||||||||||||||||||||||||||LFO||||||||||||||||||||||||||||
spl_0.lfo.Sine();
spl_0.lfo.clockPhaseAcc();

spl_1.lfo.Sine();
spl_1.lfo.clockPhaseAcc();
//|||||||||||||||||||||||||||||DAMELS|||||||||||||||||||||||||||||
// 1.ADD LFO TO SEED SELECTION 2. PROFIT !
//spl0 = sin(asin(spl0));
spl0 = spl_0.damelsDistort(spl0) / spl_0.gain;
spl1 = spl_1.damelsDistort(spl1) / spl_1.gain;
//spl1 = spl0;

//|||||||||||||||||||||||||||||DC OFFSET REMOVAL||||||||||||||||||||||||||||| 
otm1 = 0.999 * otm1 + spl0 - itm1; itm1 = spl0; spl0 = otm1;
otm2 = 0.999 * otm2 + spl1 - itm2; itm2 = spl1; spl1 = otm2;
//|||||||||||||||||||||||||||||OUTPUT GAIN||||||||||||||||||||||||||||
//spl0 *= gain_output;

//|||||||||||||||||||||||||||||SOFT LIMITER SINGLE||||||||||||||||||||||||||||
//is_softlimiter_on ?
//  (
//  spl0 = tanH(spl0);
//  );

//|||||||||||||||||||||||||||||PASSTHROUGH STEREO|||||||||||||||||||||||||||||
//force_mono ? spl1 = spl0;
/****************************GFX********************************
****************************************************************/

@gfx 500 500


/*******************************************************************
  uiInit    
  --------
  
 
*******************************************************************/ 
function uiInit(height, width, handle_x, id_offset)
  (
  this.ui.gfx_y_start        = gfx_y;
  this.ui.gfx_x_start        = gfx_x;
  this.ui.width              = width;
  this.ui.height             = height;
  this.ui.slider_width       = (width - handle_x * 2) / 2;
  this.ui.slider_0           = this.ui.slider_width + gfx_x + handle_x;  
  this.ui.handle_x           = handle_x;
  this.ui.gfx_y_offset       = (height / this.harmonic.count) | 0;
  this.ui.slider_lfo_height  = roundUp(this.ui.gfx_y_offset / 8);
  this.ui.id_offset          = id_offset;
  );

/*******************************************************************
  uiDraw    
  --------
  
 
*******************************************************************/ 
function uiDraw()
  local(n, n_id)
  (
  gfx_setfont(1, "Lucida Console", min(18, gfx_y_offset)); //HyperFont

  n = 0;
  loop(this.harmonic.count,
    n_id = (n + 1 + this.ui.id_offset) / 256;     
    //gfx_drawnumber(roundUp(n / 255 * 255),16);
    
    //draw bed
    gfx_mode = 0;
    gfx_x = this.ui.gfx_x_start;
    intParity(n) ? colorSet(0.05, 0, n_id) : colorSet(0.1, 0, n_id);      
    //gfx_rectto(gfx_x + (gfx_w / 2 - gfx_x) + 10, gfx_y + gfx_y_offset);
    gfx_rectto(this.ui.gfx_x_start + this.ui.width, gfx_y + this.ui.gfx_y_offset);
    
    
    
    /*
    gfx_x = gfx_x_start - handle_x; gfx_y -= gfx_y_offset;
    colorSet(0.1, 0.3 ,0.3);
    gfx_drawstr("[");
    colorSet(0.1, 0.5 ,0.3);
    gfx_drawnumber(n,0);
    colorSet(0.1, 0.3 ,0.3);
    gfx_drawstr("]");
    gfx_y += gfx_y_offset;
    */
    
    //draw amplitude
    gfx_mode = 1;
    gfx_x = this.ui.slider_0; gfx_y -= this.ui.gfx_y_offset; //this.ui.gfx_x_start + this.ui.handle_x;
    intParity(n) ? colorSet(0.4, 0, 0) : colorSet(0.6, 0, 0);      
    gfx_rectto(gfx_x + this.ui.slider_width * this.harmonic.amplitude[n], gfx_y + this.ui.gfx_y_offset);
  
    
    
    //draw lfo depth
    gfx_x = this.ui.slider_0; gfx_y -= this.ui.slider_lfo_height;
    intParity(n) ? colorSet(0.2, 0.2, 0) : colorSet(0.2, 0.2, 0);      
    gfx_rectto(gfx_x + this.ui.slider_width * this.harmonic.lfo_depth[n] * this.harmonic.lfo_sign[n], gfx_y + this.ui.slider_lfo_height);
    
    //draw amplitude * lfo
    //gfx_mode = 1;
    gfx_x = this.ui.slider_0; gfx_y -= this.ui.gfx_y_offset; //this.ui.gfx_x_start + this.ui.handle_x;
    intParity(n) ? colorSet(0.4, 0, 0) : colorSet(0.6, 0, 0);
    this.harmonic.lfo_depth > 0 ?
      (   
      gfx_rectto(gfx_x + this.ui.slider_width * this.harmonic.mod_amplitude[n], gfx_y + this.ui.gfx_y_offset);
      ):(
      gfx_rectto(gfx_x + this.ui.slider_width * (1 + this.harmonic.mod_amplitude[n]), gfx_y + this.ui.gfx_y_offset);
      );
    /*
    gfx_x = gfx_w / 2 + 20; gfx_y -= gfx_y_offset;
    intParity(n) ? colorSet(0.2 + n_color, 0, 0.5) : colorSet(0.2 + n_color, 0 , 0.45);      
    gfx_rectto(gfx_x + (gfx_w - gfx_x) * (spl_0.harmonic.amplitude[n] - spl_0.harmonic.amplitude[n] * ((1 + spl_0.lfo.amplitude) / 2) * spl_0.harmonic.lfo_depth[n]) , gfx_y + gfx_y_offset);      
    */
    
    //dump amplitude
    /*
    gfx_x = gfx_w / 2 + 20; gfx_y -= gfx_y_offset;
    colorInvert();
    gfx_drawnumber(spl_0.harmonic.amplitude[n],16);
    gfx_y += gfx_y_offset;
    */
    //gfx_y >= gfx_h ? ( gfx_y = gfx_y_start; gfx_x_offset += 400;);
    n +=1;
    );          
      
  );
/*******************************************************************
  optionsInit
  --------
  
  obsolete
 
*******************************************************************/ 
function optionsInit(id_offset, top_count, bottom_count, outline)
  (
  this.gfx_y_start           = gfx_y;
  this.gfx_x_start           = gfx_x;
  this.width                 = (gfx_w - 200) | 0;
  this.height                = (gfx_h - gfx_y) | 0;
  this.gfx_y_offset          = (this.height / 2) | 0;
  this.id_offset             = id_offset;
  this.buttons.top_count     = top_count;
  this.buttons.bottom_count  = bottom_count;
  this.buttons.top_width     = roundUp(this.width / top_count);
  this.buttons.bottom_width  = roundUp(this.width / bottom_count);
  this.buttons.outline       = outline;
  );

/*******************************************************************
  optionsDraw
  --------
  
 
*******************************************************************/ 
function optionsDraw()
  local(n, n_id)
  (
  gfx_y = this.gfx_y_start;
  gfx_x = this.gfx_x_start;
  n = 0;
  loop(this.buttons.top_count,
    n_id = (n + 1 + this.id_offset) / 256; 
    gfx_mode = 0;
     
    
    colorSet(0.2, 1, n_id);    
    gfx_rectto(gfx_x + this.buttons.top_width, gfx_y + this.gfx_y_offset);
    
    gfx_x -= this.buttons.top_width - this.buttons.outline;
    gfx_y -= this.gfx_y_offset      - this.buttons.outline;
    colorSet(0.2, 0.5, n_id);  
    gfx_rectto(gfx_x + this.buttons.top_width - this.buttons.outline, gfx_y + this.gfx_y_offset - this.buttons.outline);
    
    gfx_y -= this.gfx_y_offset;
    gfx_mode = 1;
    
    n += 1;
    );
  
  gfx_y = this.gfx_y_start + this.gfx_y_offset;
  gfx_x = this.gfx_x_start;
  loop(this.buttons.bottom_count,
    n_id = (n + 1 + this.id_offset) / 256; 
    gfx_mode = 0;
     
    
    colorSet(0.1, 1, n_id);    
    gfx_rectto(gfx_x + this.buttons.top_width, gfx_y + this.gfx_y_offset);
    
    gfx_x -= this.buttons.top_width - this.buttons.outline;
    gfx_y -= this.gfx_y_offset      - this.buttons.outline;
    colorSet(0.1, 0.5, n_id);  
    gfx_rectto(gfx_x + this.buttons.bottom_width - this.buttons.outline, gfx_y + this.gfx_y_offset - this.buttons.outline);
    
    gfx_y -= this.gfx_y_offset;
    gfx_mode = 1;
    
    n += 1;
    );
  
  );

/*******************************************************************
  optionsCopy01
  --------
  
 
*******************************************************************/ 
function optionsCopy01()
  //local(n)
  (
  //n = 0;
  memcpy(spl_1.harmonic.amplitude, spl_0.harmonic.amplitude, spl_1.harmonic.count);
  memcpy(spl_1.harmonic.lfo_depth, spl_0.harmonic.lfo_depth, spl_1.harmonic.count);
  memcpy(spl_1.harmonic.lfo_sign,  spl_0.harmonic.lfo_sign,  spl_1.harmonic.count);
  //loop(spl_1.harmonic.count,
    //spl_1.harmonic.amplitude[n] = spl_0.harmonic.amplitude[n];
    //spl_1.harmonic.lfo_depth[n] = spl_0.harmonic.lfo_depth[n];
    //spl_1.harmonic.lfo_sign[n]  = spl_0.harmonic.lfo_sign[n];
    
    //n +=1;
    //);
  );
  
/*******************************************************************
  optionsCopy10
  --------
  
 
*******************************************************************/ 
function optionsCopy10() 
  (
  memcpy(spl_0.harmonic.amplitude, spl_1.harmonic.amplitude, spl_0.harmonic.count);
  memcpy(spl_0.harmonic.lfo_depth, spl_1.harmonic.lfo_depth, spl_0.harmonic.count);
  memcpy(spl_0.harmonic.lfo_sign,  spl_1.harmonic.lfo_sign,  spl_0.harmonic.count);
  );
  
/*******************************************************************
  optionsRnd0
  --------
  
 
*******************************************************************/ 
function optionsRnd0()
  local(n)
  (
  n = 0;
  loop(spl_0.harmonic.count,
    spl_0.harmonic.amplitude[n] = rand(2) - 1;
    spl_0.harmonic.lfo_depth[n] = rand(2) - 1;
    spl_0.harmonic.lfo_sign[n]  = sign(spl_0.harmonic.lfo_depth[n]);
    spl_0.harmonic.lfo_depth[n] = abs(spl_0.harmonic.lfo_depth[n]);
    
    n +=1;
    );
  );
/*******************************************************************
  optionsRnd1
  --------
  
 
*******************************************************************/ 
function optionsRnd1()
  local(n)
  (
  n = 0;
  loop(spl_1.harmonic.count,
    spl_1.harmonic.amplitude[n] = rand(2) - 1;
    spl_1.harmonic.lfo_depth[n] = rand(2) - 1;
    spl_1.harmonic.lfo_sign[n]  = sign(spl_1.harmonic.lfo_depth[n]);
    spl_1.harmonic.lfo_depth[n] = abs(spl_1.harmonic.lfo_depth[n]);
    
    n +=1;
    );
  );
  
/*******************************************************************
  optionsHalfRnd0
  --------
  
 
*******************************************************************/ 
function optionsHalfRnd0()
  local(n)
  (
  n = 0;
  loop(spl_0.harmonic.count,
    spl_0.harmonic.amplitude[n] = spl_0.harmonic.amplitude[n] / 2 + (rand(2) - 1) / 2;
    spl_0.harmonic.lfo_depth[n] = spl_0.harmonic.lfo_depth[n] / 2 + (rand(2) - 1) / 2;
    spl_0.harmonic.lfo_sign[n]  = sign(spl_0.harmonic.lfo_depth[n]);
    spl_0.harmonic.lfo_depth[n] = abs(spl_0.harmonic.lfo_depth[n]);
    
    n +=1;
    );
  );    


colorSet(0, 0.5 ,1);
//gfx_x = 50; gfx_y = 125;

  
gfx_a = 0.7; colorSet(0.15, 0.15 ,0.15);
gfx_rect(0, 0, gfx_w, gfx_h); 
gfx_a = 1;


// SETTINGS ---------------- MOVE INITS TO GFX_WINDOW RESIZE EVENTS --------------------------------------------------------------------------------------------------------------------------
margin_x = 20;
coeff_h = gfx_h * 0.85;
coeff_w = gfx_w  / 2;

gfx_x = 0; gfx_y = 0;
spl_0.uiInit(coeff_h, coeff_w, margin_x, 0);
spl_0.uiDraw();

gfx_x = gfx_w / 2; gfx_y = 0;

spl_1.uiInit(coeff_h, coeff_w, margin_x, spl_0.harmonic.count);
spl_1.uiDraw();

gfx_x = margin_x; gfx_y = coeff_h;
ui.optionsInit(spl_0.harmonic.count * 2, 10, 32, 2B);
ui.optionsDraw(); //Only need to draw this on Resize Events

// LEFT CLICK AND DRAG ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
mouse_cap == 1  ? ( //&& mouse_x > 40 && mouse_x < (gfx_w / 2 + 10)//&& mouse_x > 5 && mouse_x < gfx_w - 5 && mouse_y > 5 && mouse_y < gfx_h - 5 ? (
  //gfx_dest = 0;
  gfx_x = mouse_x; gfx_y = mouse_y;
  gfx_getpixel(click_r, click_g, click_b);
  click_b = roundUp(click_b * 255);
  
  click_b < spl_1.ui.id_offset ? (  // spl_0
    spl_0.harmonic.amplitude[click_b] = max(-1, min(1,(mouse_x - spl_0.ui.slider_0) / spl_0.ui.slider_width));
    ):(
  click_b < ui.id_offset       ? (  // spl_1
    spl_1.harmonic.amplitude[click_b - spl_1.ui.id_offset] = max(-1, min(1,(mouse_x - spl_1.ui.slider_0) / spl_1.ui.slider_width));  
    ):(
  click_b == ui.id_offset     ? (  // button copy spl_0 to spl_1
    optionsCopy01();
    ):(
  click_b == ui.id_offset + 1 ? (  // button copy spl_1 to spl_0
    optionsCopy10();
    ):(
  click_b == ui.id_offset + 2 ? (  // button rand spl_0
    optionsRnd0();
    ):(
  click_b == ui.id_offset + 3 ? (  // button rand spl_1
    optionsRnd1();
    ):( 
  click_b == ui.id_offset + 4 ? (  // button half rand spl_0
    optionsHalfRnd0();
    ):(         
  click_b > (ui.id_offset + ui.buttons.top_count) ? (  // button copy spl_1 to spl_0
    slider2 = click_b;
    ););););););););
    
  );

// RIGHT CLICK AND DRAG ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
mouse_cap == 2 ? ( //&& mouse_x > 40 && mouse_x < (gfx_w / 2 + 10) //&& mouse_x > 5 && mouse_x < gfx_w - 5 && mouse_y > 5 && mouse_y < gfx_h - 5 ? (
  //gfx_dest = 0;
  gfx_x = mouse_x; gfx_y = mouse_y;
  gfx_getpixel(click_r, click_g, click_b);
  click_b = roundUp(click_b * 255);
  
  click_b < spl_1.ui.id_offset ?
    (
    click_lfo = max(-1, min(1,(mouse_x - spl_0.ui.slider_0) / spl_0.ui.slider_width)); 
    spl_0.harmonic.lfo_depth[click_b] = abs(click_lfo);
    spl_0.harmonic.lfo_sign[click_b]  = sign(click_lfo);
    ):(
    click_lfo = max(-1, min(1,(mouse_x - spl_1.ui.slider_0) / spl_1.ui.slider_width));
    spl_1.harmonic.lfo_depth[click_b - spl_1.ui.id_offset] = abs(click_lfo);
    spl_1.harmonic.lfo_sign[click_b  - spl_1.ui.id_offset] = sign(click_lfo)
    );
  
  );
  
// MIDDLE CLICK AND DRAG ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
mouse_cap == 64 ? ( //&& mouse_x > 40 && mouse_x < (gfx_w / 2 + 10) //&& mouse_x > 5 && mouse_x < gfx_w - 5 && mouse_y > 5 && mouse_y < gfx_h - 5 ? (
  //gfx_dest = 0;
  gfx_x = mouse_x; gfx_y = mouse_y;
  gfx_getpixel(click_r, click_g, click_b);
  click_b = roundUp(click_b * 255);
  
  click_b < spl_1.ui.id_offset ?
    ( 
    spl_0.harmonic.amplitude[click_b] = 0;
    spl_0.harmonic.lfo_depth[click_b] = 0;
    spl_0.harmonic.lfo_sign[click_b]  = 1;
    ):(
    spl_1.harmonic.amplitude[click_b - spl_1.ui.id_offset] = 0;
    spl_1.harmonic.lfo_depth[click_b - spl_1.ui.id_offset] = 0;
    spl_1.harmonic.lfo_sign[click_b  - spl_1.ui.id_offset] = 1;
    );
  
  );


//debug buffer map
gfx_setfont(0);
colorSet(128, 255, 255);
//gfx_dest = 1;
gfx_x = mouse_x; gfx_y = mouse_y;
gfx_getpixel(rr, gg, bb);
//gfx_dest = -1;
gfx_drawnumber(rr * 255, 5); gfx_drawstr(" | ");
gfx_drawnumber(gg * 255, 5); gfx_drawstr(" | ");
gfx_drawnumber(bb * 255, 5);

screenFill(0.15, 0.15, 0.0);
// MEMORY DUMP ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
gfx_x = mouse_x; gfx_y = mouse_y + 8;
gfx_setfont(0);


gfx_mode = 0;
memDiagnostic(30, 40, 4);

gfx_x = mouse_x; gfx_y = mouse_y + 8;
memMap(4);       
*/
